   HTML, an initialism of HyperText Markup Language, is the predominant markup language for Web pages. It provides a means to describe the structure of text-based information in a document — by denoting certain text as links, headings, paragraphs, lists, and so on — and to supplement that text with interactive forms, embedded images, and other objects. HTML is written in the form of tags, surrounded by angle brackets. HTML can also describe, to some degree, the appearance and semantics of a document, and can include embedded scripting language code (such as JavaScript) which can affect the behavior of Web browsers and other HTML processors.Files and URLs containing HTML often have a .html filename extension.History of HTMLOriginsIn 1980, physicist Tim Berners-Lee, who was an independent contractor at CERN, proposed and prototyped ENQUIRE, a system for CERN researchers to use and share documents. In 1989, Berners-Lee and CERN data systems engineer Robert Cailliau each submitted separate proposals for an Internet-based hypertext system providing similar functionality. The following year, they collaborated on a joint proposal, the WorldWideWeb (W3) project,Tim Berners-Lee, "Information Management: A Proposal." CERN (March 1989, May 1990). http://www.w3.org/History/1989/proposal.html&lt;/ref&gt; which was accepted by CERN.First specificationsThe first publicly available description of HTML was a document called HTML Tags, first mentioned on the Internet by Berners-Lee in late 1991. It describes 22 elements comprising the initial, relatively simple design of HTML. Thirteen of these elements still exist in HTML 4.Berners-Lee considered HTML to be, at the time, an application of SGML, but it was not formally defined as such until the mid-1993 publication, by the IETF, of the first proposal for an HTML specification: Berners-Lee and Dan Connolly's "Hypertext Markup Language (HTML)" Internet-Draft, which included an SGML Document Type Definition to define the grammar. The draft expired after six months, but was notable for its acknowledgment of the NCSA Mosaic browser's custom tag for embedding in-line images, reflecting the IETF's philosophy of basing standards on successful prototypes. Similarly, Dave Raggett's competing Internet-Draft, "HTML+ (Hypertext Markup Format)", from late 1993, suggested standardizing already-implemented features like tables and fill-out forms.After the HTML and HTML+ drafts expired in early 1994, the IETF created an HTML Working Group, which in 1995 completed "HTML 2.0", the first HTML specification intended to be treated as a standard against which future implementations should be based. Published as Request for Comments 1996, HTML 2.0 included ideas from the HTML and HTML+ drafts. There was no "HTML 1.0"; the 2.0 designation was intended to distinguish the new edition from previous drafts.Further development under the auspices of the IETF was stalled by competing interests. Since 1996, the HTML specifications have been maintained, with input from commercial software vendors, by the World Wide Web Consortium (W3C). However, in 2000, HTML also became an international standard (ISO/IEC 15445:2000). The last HTML specification published by the W3C is the HTML 4.01 Recommendation, published in late 1999. Its issues and errors were last acknowledged by errata published in 2001.Version history of the standardHTML version timelineNovember 1995: HTML 2.0http://tools.ietf.org/html/rfc1866&lt;/ref&gt; was published as IETF RFC 1866. Supplemental RFCs added capabilities:November 1995: RFC 1867 (form-based file upload)May 1996: RFC 1942 (tables)August 1996: RFC 1980 (client-side image maps)January 1997: RFC 2070 (internationalization)In June 2000, all of these were declared obsolete/historic by RFC 2854.January 1997: HTML 3.2http://www.w3.org/TR/REC-html32&lt;/ref&gt; was published as a W3C Recommendation. It was the first version developed and standardized exclusively by the W3C, as the IETF had closed its HTML Working Group in September 1997.HTML 3.2 dropped math formulas entirely, reconciled overlap among various proprietary extensions, and adopted most of Netscape's visual markup tags. Netscape's blink element and Microsoft's marquee element were omitted due to a mutual agreement between the two companies. The ability to include mathematical formulas in HTML wasn't standardized until years later in MathML.December 1997: HTML 4.0http://www.w3.org/TR/REC-html40-971218/&lt;/ref&gt; was published as a W3C Recommendation. It offers three "flavors":Strict, in which deprecated elements are forbidden,Transitional, in which deprecated elements are allowed,Frameset, in which mostly only frame related elements are allowed;Initially code-named "Cougar", HTML 4.0 adopted many browser-specific element types and attributes, but at the same time sought to phase out Netscape's visual markup features by marking them as deprecated in favor of style sheets.April 1998: HTML 4.0http://www.w3.org/TR/1998/REC-html40-19980424/&lt;/ref&gt; was reissued with minor edits without incrementing the version number.December 1999: HTML 4.01http://www.w3.org/TR/html401&lt;/ref&gt; was published as a W3C Recommendation. It offers the same three flavors as HTML 4.0, and its last errata were published May 12, 2001.May 2000: ISO/IEC 15445:2000https://www.cs.tcd.ie/15445/15445.HTML&lt;/ref&gt; ("ISO HTML", based on HTML 4.01 Strict) was published as an ISO/IEC international standard.As of mid-2008, HTML 4.01 and ISO/IEC 15445:2000 are the most recent versions of HTML. Development of the parallel, XML-based language XHTML occupied the W3C's HTML Working Group through the early and mid-2000s.DraftsOctober 1991: HTML Tagshttp://www.w3.org/History/19921103-hypertext/hypertext/WWW/MarkUp/Tags.html&lt;/ref&gt;, an informal CERN document listing twelve HTML tags, was first mentioned in public. The list was updated in November 1992.July 1993: Hypertext Markup Languagehttp://www.w3.org/MarkUp/draft-ietf-iiir-html-01.txt&lt;/ref&gt; was published by the IETF as an Internet-Draft (a rough proposal for a standard). It expired in January 1994.November 1993: HTML+ was published by the IETF as an Internet-Draft and was a competing proposal to the Hypertext Markup Language draft. It expired in May 1994.April 1995 (authored March 1995): HTML 3.0http://www.w3.org/MarkUp/html3/&lt;/ref&gt; was proposed as a standard to the IETF, but the proposal expired five months later without further action. It included many of the capabilities that were in Raggett's HTML+ proposal, such as support for tables, text flow around figures, and the display of complex mathematical formulas. A demonstration appeared in W3C's own Arena browser. HTML 3.0 did not succeed for several reasons. The pace of browser development, as well as the number of interested parties, had outstripped the resources of the IETF.&lt;/ref&gt; Netscape continued to introduce HTML elements that specified the visual appearance of documents, contrary to the goals of the newly-formed W3C, which sought to limit HTML to describing logical structure.Press Release: W3C Publishes Public Draft of CSS2&lt;!-- Bot generated title --&gt; Microsoft, a newcomer at the time, played to all sides by creating its own tags, implementing Netscape's elements for compatibility, and supporting W3C features such as Cascading Style Sheets.January 2008: HTML 5http://www.w3.org/TR/html5/&lt;/ref&gt; was published as a Working Draft by the W3C.XHTML versions XHTML is a separate language that began as a reformulation of HTML 4.01 using XML 1.0. It continues to be developed:XHTML 1.0http://www.w3.org/TR/xhtml1/&lt;/ref&gt;, published January 26, 2000 as a W3C Recommendation, later revised and republished August 1, 2002. It offers the same three flavors as HTML 4.0 and 4.01, reformulated in XML, with minor restrictions.XHTML 1.1http://www.w3.org/TR/xhtml11/&lt;/ref&gt;, published May 31, 2001 as a W3C Recommendation. It is based on XHTML 1.0 Strict, but includes minor changes, can be customized, and is reformulated using modules from Modularization of XHTML, which was published April 10, 2001 as a W3C Recommendation.XHTML 2.0http://www.w3.org/TR/xhtml2/&lt;/ref&gt; is still a W3C Working Draft. XHTML 2.0 is incompatible with XHTML 1.x and, therefore, would be more accurate to characterize as an XHTML-inspired new language than an update to XHTML 1.x.XHTML 5, which is an update to XHTML 1.x, is being defined alongside HTML 5 in the HTML 5 draft.http://www.w3.org/html/wg/html5/&lt;/ref&gt;Simple HTMLHTML is very simple when you compare it with other types of programming language. The simplest HTML Scripting is probably text changing scripts, like:   Hello Wikipedia!   Hello World  HTML markupHTML markup consists of several key components, including elements (and their attributes), character-based data types, and character references and entity references. Another important component is the document type declaration.The Hello world program, a common computer program employed for comparing programming languages, scripting languages, and markup languages is made of 10 lines of code in HTML, albeit line breaks are optional:    Hello HTML   Hello World!   ElementsSee HTML elements for more detailed descriptions.Elements are the basic structure for HTML markup. Elements have two basic properties: attributes and content. Each attribute and each element's content has certain restrictions that must be followed for an HTML document to be considered valid. An element usually has a start tag (e.g. ) and an end tag (e.g. ). The element's attributes are contained in the start tag and content is located between the tags (e.g. Content). Some elements, such as , do not have any content and must not have a closing tag. Listed below are several types of markup elements used in HTML.Structural markup describes the purpose of text. For example, Golf establishes "Golf" as a second-level heading, which would be rendered in a browser in a manner similar to the "HTML markup" title at the start of this section. Structural markup does not denote any specific rendering, but most Web browsers have standardized on how elements should be formatted. Text may be further styled with Cascading Style Sheets (CSS).Presentational markup describes the appearance of the text, regardless of its function. For example boldface indicates that visual output devices should render "boldface" in bold text, but gives no indication what devices which are unable to do this (such as aural devices that read the text aloud) should do. In the case of both bold and italic, there are elements which usually have an equivalent visual rendering but are more semantic in nature, namely strong emphasis and emphasis respectively. It is easier to see how an aural user agent should interpret the latter two elements. However, they are not equivalent to their presentational counterparts: it would be undesirable for a screen-reader to emphasize the name of a book, for instance, but on a screen such a name would be italicized. Most presentational markup elements have become deprecated under the HTML 4.0 specification, in favor of CSS based style design.Hypertext markup links parts of the document to other documents. HTML up through version XHTML 1.1 requires the use of an anchor element to create a hyperlink in the flow of text: Wikipedia. However, the href attribute must also be set to a valid URL so for example the HTML code, Wikipedia" as a hyperlink.To link on an image, the anchor tag use the following syntax: AttributesMost of the attributes of an element are name-value pairs, separated by "=", and written within the start tag of an element, after the element's name. The value may be enclosed in single or double quotes, although values consisting of certain characters can be left unquoted in HTML (but not XHTML). Leaving attribute values unquoted is considered unsafe. In contrast with name-value pair attributes, there are some attributes that affect the element simply by their presence in the start tag of the element (like the ismap attribute for the img element).Most elements can take any of several common attributes:The id attribute provides a document-wide unique identifier for an element. This can be used by stylesheets to provide presentational properties, by browsers to focus attention on the specific element, or by scripts to alter the contents or presentation of an element.The class attribute provides a way of classifying similar elements for presentation purposes. For example, an HTML document might use the designation class="notation" to indicate that all elements with this class value are subordinate to the main text of the document. Such elements might be gathered together and presented as footnotes on a page instead of appearing in the place where they occur in the HTML source.An author may use the style non-attributal codes presentational properties to a particular element. It is considered better practice to use an element’s son- id page and select the element with a stylesheet, though sometimes this can be too cumbersome for a simple ad hoc application of styled properties.The title attribute is used to attach subtextual explanation to an element. In most browsers this attribute is displayed as what is often referred to as a tooltip.The generic inline element span can be used to demonstrate these various attributes:HTMLThis example displays as HTML; in most browsers, pointing the cursor at the abbreviation should display the title text "Hypertext Markup Language."Most elements also take the language-related attributes lang and dir.Character and entity referencesAs of version 4.0, HTML defines a set of 252 character entity references and a set of 1,114,050 numeric character references, both of which allow individual characters to be written via simple markup, rather than literally. A literal character and its markup counterpart are considered equivalent and are rendered identically.The ability to "escape" characters in this way allows for the characters &lt; and &amp; (when written as &amp;lt; and &amp;amp;, respectively) to be interpreted as character data, rather than markup. For example, a literal &lt; normally indicates the start of a tag, and &amp; normally indicates the start of a character entity reference or numeric character reference; writing it as &amp;amp; or &amp;#x26; or &amp;#38; allows &amp; to be included in the content of elements or the values of attributes. The double-quote character ("), when used to quote an attribute value, must also be escaped as &amp;quot; or &amp;#x22; or &amp;#34; when it appears within the attribute value itself. The single-quote character ('), when used to quote an attribute value, must also be escaped as &amp;#x27; or &amp;#39; (should NOT be escaped as &amp;apos; except in XHTML documents) when it appears within the attribute value itself. However, since document authors often overlook the need to escape these characters, browsers tend to be very forgiving, treating them as markup only when subsequent text appears to confirm that intent.Escaping also allows for characters that are not easily typed or that aren't even available in the document's character encoding to be represented within the element and attribute content. For example, the acute-accented e (é), a character typically found only on Western European keyboards, can be written in any HTML document as the entity reference &amp;eacute; or as the numeric references &amp;#233; or &amp;#xE9;. The characters comprising those references (that is, the &amp;, the ;, the letters in eacute, and so on) are available on all keyboards and are supported in all character encodings, whereas the literal é is not.Data typesHTML defines several data types for element content, such as script data and stylesheet data, and a plethora of types for attribute values, including IDs, names, URIs, numbers, units of length, languages, media descriptors, colors, character encodings, dates and times, and so on. All of these data types are specializations of character data.The Document Type DeclarationIn order to enable validation based on Document Type Definition (DTD) with SGML tools thus avoiding the quirks mode in browsers, HTML documents can start with a Document Type Declaration (informally, a "DOCTYPE"). The DTD to which the DOCTYPE refers contains machine-readable grammar specifying the permitted and prohibited content for a document conforming to such a DTD. Browsers do not necessarily read the DTD, however. The most popular graphical browsers use DOCTYPE declarations (or the lack thereof) and other data at the beginning of sources to determine which rendering mode to use.For example:, leaving formatting to Cascading Style Sheets and the span and div tags. SGML-based validators read the DTD in order to properly parse the document and to perform validation. In modern browsers, the HTML 4.01 Strict doctype activates standards layout mode for CSS as opposed to quirks mode.In addition, HTML 4.01 provides Transitional and Frameset DTDs. The Transitional DTD was intended to gradually phase in the changes made in the Strict DTD, while the Frameset DTD was intended for those documents which contained frames.Semantic HTMLThere is no official specification called "Semantic HTML", though the strict flavors of HTML discussed below are a push in that direction. Rather, semantic HTML refers to an objective and a practice to create documents with HTML that contain only the author's intended meaning, without any reference to how this meaning is presented or conveyed. A classic example is the distinction between the emphasis element (&lt;em&gt;) and the italics element (&lt;i&gt;). Often the emphasis element is displayed in italics, so the presentation is typically the same. However, emphasizing something is different from listing the title of a book, for example, which may also be displayed in italics. In purely semantic HTML, a book title would use a different element than emphasized text uses (for example a &lt;span&gt;), because they are meaningfully different things.The goal of semantic HTML requires two things of authors:To avoid the use of presentational markup (elements, attributes, and other entities).To use available markup to differentiate the meanings of phrases and structure in the document. So for example, the book title from above would need to have its own element and class specified, such as &lt;cite class="booktitle"&gt;The Grapes of Wrath&lt;/cite&gt;. Here, the &lt;cite&gt; element is used because it most closely matches the meaning of this phrase in the text. However, the &lt;cite&gt; element is not specific enough to this task, since we mean to cite specifically a book title as opposed to a newspaper article or an academic journal.Semantic HTML also requires complementary specifications and software compliance with these specifications. Primarily, the development and proliferation of CSS has led to increasing support for semantic HTML, because CSS provides designers with a rich language to alter the presentation of semantic-only documents. With the development of CSS, the need to include presentational properties in a document has virtually disappeared. With the advent and refinement of CSS and the increasing support for it in Web browsers, subsequent editions of HTML increasingly stress only using markup that suggests the semantic structure and phrasing of the document, like headings, paragraphs, quotes, and lists, instead of using markup which is written for visual purposes only, like &lt;font&gt;, &lt;b&gt; (bold), and &lt;i&gt; (italics). Some of these elements are not permitted in certain varieties of HTML, like HTML 4.01 Strict. CSS provides a way to separate document semantics from the content's presentation, by keeping everything relevant to presentation defined in a CSS file. See separation of style and content.Semantic HTML offers many advantages. First, it ensures consistency in style across elements that have the same meaning. Every heading, every quotation, every similar element receives the same presentation properties.Second, semantic HTML frees authors from the need to concern themselves with presentation details. When writing the number two, for example, should it be written out in words ("two"), or should it be written as a numeral (2)? A semantic markup might enter something like 2 and leave presentation details to the stylesheet designers. Similarly, an author might wonder where to break out quotations into separate indented blocks of text: with purely semantic HTML, such details would be left up to stylesheet designers. Authors would simply indicate quotations when they occur in the text, and not concern themselves with presentation.A third advantage is device independence and repurposing of documents. A semantic HTML document can be paired with any number of stylesheets to provide output to computer screens (through Web browsers), high-resolution printers, handheld devices, aural browsers or braille devices for those with visual impairments, and so on. To accomplish this, nothing needs to be changed in a well-coded semantic HTML document. Readily available stylesheets make this a simple matter of pairing a semantic HTML document with the appropriate stylesheets. (Of course, the stylesheet's selectors need to match the appropriate properties in the HTML document.)Some aspects of authoring documents make separating semantics from style (in other words, meaning from presentation) difficult. Some elements are hybrids, using presentation in their very meaning. For example, a table displays content in a tabular form. Often such content conveys the meaning only when presented in this way. Repurposing a table for an aural device typically involves somehow presenting the table as an inherently visual element in an audible form. On the other hand, we frequently present lyrical songs&mdash;something inherently meant for audible presentation&mdash;and instead present them in textual form on a Web page. For these types of elements, the meaning is not so easily separated from their presentation. However, for a great many of the elements used and meanings conveyed in HTML, the translation is relatively smooth.Delivery of HTMLHTML documents can be delivered by the same means as any other computer file; however, they are most often delivered in one of two forms: over HTTP servers and through e-mail.HTTPThe World Wide Web is composed primarily of HTML documents transmitted from a Web server to a Web browser using the Hypertext Transfer Protocol (HTTP). However, HTTP can be used to serve images, sound, and other content in addition to HTML. To allow the Web browser to know how to handle the document it received, an indication of the file format of the document must be transmitted along with the document. This vital metadata includes the MIME type (text/html for HTML 4.01 and earlier, application/xhtml+xml for XHTML 1.0 and later) and the character encoding (see Character encodings in HTML).In modern browsers, the MIME type that is sent with the HTML document affects how the document is interpreted. A document sent with an XHTML MIME type, or served as application/xhtml+xml, is expected to be well-formed XML, and a syntax error causes the browser to fail to render the document. The same document sent with an HTML MIME type, or served as text/html, might be displayed successfully, since Web browsers are more lenient with HTML. However, XHTML parsed in this way is not considered either proper XHTML or HTML, but so-called tag soup.If the MIME type is not recognized as HTML, the Web browser should not attempt to render the document as HTML, even if the document is prefaced with a correct Document Type Declaration. Nevertheless, some Web browsers do examine the contents or URL of the document and attempt to infer the file type, despite this being forbidden by the HTTP 1.1 specification.HTML e-mail Most graphical e-mail clients allow the use of a subset of HTML (often ill-defined) to provide formatting and semantic markup capabilities not available with plain text, like emphasized text, block quotations for replies, and diagrams or mathematical formulas that could not easily be described otherwise. Many of these clients include both a GUI editor for composing HTML e-mail messages and a rendering engine for displaying received HTML messages. Use of HTML in e-mail is controversial because of compatibility issues, because it can be used in phishing/privacy attacks, because it can confuse spam filters, and because the message size is larger than plain text.Naming conventionsThe most common filename extension for files containing HTML is .html. A common abbreviation of this is .htm; it originates from older operating systems and file systems, such as the DOS versions from the 80s and early 90s and FAT, which limit file extensions to three letters.Current flavors of HTMLSince its inception, HTML and its associated protocols gained acceptance relatively quickly. However, no clear standards existed in the early years of the language. Though its creators originally conceived of HTML as a semantic language devoid of presentation details, practical uses pushed many presentational elements and attributes into the language, driven largely by the various browser vendors. The latest standards surrounding HTML reflect efforts to overcome the sometimes chaotic development of the language and to create a rational foundation for building both meaningful and well-presented documents. To return HTML to its role as a semantic language, the W3C has developed style languages such as CSS and XSL to shoulder the burden of presentation. In conjunction, the HTML specification has slowly reined in the presentational elements.There are two axes differentiating various flavors of HTML as currently specified: SGML-based HTML versus XML-based HTML (referred to as XHTML) on the one axis, and strict versus transitional (loose) versus frameset on the other axis.SGML-based versus XML-based HTMLOne difference in the latest HTML specifications lies in the distinction between the SGML-based specification and the XML-based specification. The XML-based specification is usually called XHTML to distinguish it clearly from the more traditional definition; however, the root element name continues to be 'html' even in the XHTML-specified HTML. The W3C intended XHTML 1.0 to be identical to HTML 4.01 except where limitations of XML over the more complex SGML require workarounds. Because XHTML and HTML are closely related, they are sometimes documented in parallel. In such circumstances, some authors conflate the two names as (X)HTML or X(HTML).See e.g., XHTML#Relationship to HTMLLike HTML 4.01, XHTML 1.0 has three sub-specifications: strict, loose, and frameset.Aside from the different opening declarations for a document, the differences between an HTML 4.01 and XHTML 1.0 document&mdash;in each of the corresponding DTDs&mdash;are largely syntactic. The underlying syntax of HTML allows many shortcuts that XHTML does not, such as elements with optional opening or closing tags, and even EMPTY elements which must not have an end tag. By contrast, XHTML requires all elements to have an opening tag or a closing tag. XHTML, however, also introduces a new shortcut: an XHTML tag may be opened and closed within the same tag, by including a slash before the end of the tag like this: &lt;br/&gt;. The introduction of this shorthand, which is not used in the SGML declaration for HTML 4.01, may confuse earlier software unfamiliar with this new convention.To understand the subtle differences between HTML and XHTML, consider the transformation of a valid and well-formed XHTML 1.0 document that adheres to Appendix C (see below) into a valid HTML 4.01 document. To make this translation requires the following steps:The language for an element should be specified with a lang attribute rather than the XHTML xml:lang attribute. XHTML uses XML's built in language-defining functionality attribute.Remove the XML namespace (xmlns=URI). HTML has no facilities for namespaces.Change the document type declaration from XHTML 1.0 to HTML 4.01. (see DTD section for further explanation).If present, remove the XML declaration. (Typically this is: ).Ensure that the document’s MIME type is set to text/html. For both HTML and XHTML, this comes from the HTTP Content-Type header sent by the server.Change the XML empty-element syntax to an HTML style empty element (&lt;br/&gt; to &lt;br&gt;).Those are the main changes necessary to translate a document from XHTML 1.0 to HTML 4.01. To translate from HTML to XHTML would also require the addition of any omitted opening or closing tags. Whether coding in HTML or XHTML it may just be best to always include the optional tags within an HTML document rather than remembering which tags can be omitted.A well-formed XHTML document adheres to all the syntax requirements of XML. A valid document adheres to the content specification for XHTML, which describes the document structure.The W3C recommends several conventions to ensure an easy migration between HTML and XHTML (see HTML Compatibility Guidelines). The following steps can be applied to XHTML 1.0 documents only:Include both xml:lang and lang attributes on any elements assigning language.Use the empty-element syntax only for elements specified as empty in HTML.Include an extra space in empty-element tags: for example &lt;br&nbsp;/&gt; instead of &lt;br/&gt;.Include explicit close tags for elements that permit content but are left empty (for example, &lt;div&gt;&lt;/div&gt;, not &lt;div /&gt;).Omit the XML declaration.By carefully following the W3C’s compatibility guidelines, a user agent should be able to interpret the document equally as HTML or XHTML. For documents that are XHTML 1.0 and have been made compatible in this way, the W3C permits them to be served either as HTML (with a text/html MIME type), or as XHTML (with an application/xhtml+xml or application/xml MIME type). When delivered as XHTML, browsers should use an XML parser, which adheres strictly to the XML specifications for parsing the document's contents.Transitional versus StrictThe latest SGML-based specification HTML 4.01 and the earliest XHTML version include three sub-specifications: Strict, Transitional (once called Loose), and Frameset. The Strict variant represents the standard proper, whereas the Transitional and Frameset variants were developed to assist in the transition from earlier versions of HTML (including HTML 3.2). The Transitional and Frameset variants allow for presentational markup whereas the Strict variant encourages the use of style sheets through its omission of most presentational markup.The primary differences which make the Transitional variant more permissive than the Strict variant (the differences are the same in HTML 4 and XHTML 1.0) are:A looser content modelInline elements and plain text (#PCDATA) are allowed directly in: body, blockquote, form, noscript and noframesPresentation related elementsunderline (u)strike-through (del)centerfontbasefontPresentation related attributesbackground and bgcolor attributes for body element.align attribute on div, form, paragraph (p), and heading (h1...h6) elementsalign, noshade, size, and width attributes on hr elementalign, border, vspace, and hspace attributes on img and object elementsalign attribute on legend and caption elementsalign and bgcolor on table elementnowrap, bgcolor, width, height on td and th elementsbgcolor attribute on tr elementclear attribute on br elementcompact attribute on dl, dir and menu elementstype, compact, and start attributes on ol and ul elementstype and value attributes on li elementwidth attribute on pre elementAdditional elements in Transitional specificationmenu list (no substitute, though unordered list is recommended; may return in XHTML 2.0 specification)dir list (no substitute, though unordered list is recommended)isindex (element requires server-side support and is typically added to documents server-side)applet (deprecated in favor of object element)The language attribute on script element (presumably redundant with type attribute, though this is maintained for legacy reasons).Frame related entitiesframeset element (used in place of body for frameset DTD)frame elementiframenoframestarget attribute on anchor, client-side image-map (imagemap), link, form, and base elementsFrameset versus transitionalIn addition to the above transitional differences, the frameset specifications (whether XHTML 1.0 or HTML 4.01) specifies a different content model:  &lt;head&gt;
 &lt;title&gt;&lt;/title&gt;
 &lt;!-- other head elements --&gt;
&lt;/head&gt;&lt;!-- frameset replaces body --&gt;
&lt;frameset&gt; &lt;!-- frame definitions --&gt;
 &lt;frame&gt;&lt;/frame&gt;
 &lt;!-- , ... --&gt; &lt;!-- optional: alternate page body for frames-incompatible user agents --&gt;
 &lt;noframes&gt;
  &lt;body&gt;&lt;/body&gt;
 &lt;/noframes&gt;&lt;/frameset&gt; Summary of flavorsAs this list demonstrates, the loose flavors of the specification are maintained for legacy support. However, contrary to popular misconceptions, the move to XHTML does not imply a removal of this legacy support. Rather the X in XML stands for extensible and the W3C is modularizing the entire specification and opening it up to independent extensions. The primary achievement in the move from XHTML 1.0 to XHTML 1.1 is the modularization of the entire specification. The strict version of HTML is deployed in XHTML 1.1 through a set of modular extensions to the base XHTML 1.1 specification. Likewise someone looking for the loose (transitional) or frameset specifications will find similar extended XHTML 1.1 support (much of it is contained in the legacy or frame modules). The modularization also allows for separate features to develop on their own timetable. So for example XHTML 1.1 will allow quicker migration to emerging XML standards such as MathML (a presentational and semantic math language based on XML) and XForms &mdash; a new highly advanced web-form technology to replace the existing HTML forms.In summary, the HTML 4.01 specification primarily reined in all the various HTML implementations into a single clear written specification based on SGML. XHTML 1.0, ported this specification, as is, to the new XML defined specification. Next, XHTML 1.1 takes advantage of the extensible nature of XML and modularizes the whole specification. XHTML 2.0 will be the first step in adding new features to the specification in a standards-body-based approach.Hypertext features not in HTMLHTML lacks some of the features found in earlier hypertext systems, such as typed links, source tracking, fat links, and more. Even some hypertext features that were in early versions of HTML have been ignored by most popular web browsers until recently, such as the link element and in-browser Web page editing.Sometimes Web services or browser manufacturers remedy these shortcomings. For instance, wikis and content management systems allow surfers to edit the Web pages they visit.See alsoSource CodeAlt attributeBreadcrumb (navigation)Tim Berners-LeeCharacter encodings in HTMLComparison of document markup languagesComparison of layout engines (HTML)Comparison of layout engines (HTML 5)Cascading Style SheetsDynamic HTMLHTML 5HTML decimal character renderingHTML editorHTML elementHTML scriptingThe HTML Sourcebook: The Complete Guide to HTML (historical reference from 1995)List of document markup languagesList of XML and HTML character entity referencesMicroformatsParsingUnicode and HTMLWeb colorsXHTMLWeb Hypertext Application Technology Working GroupReferencesExternal links  HTML 4.01, the last valid specificationDave Raggett's Introduction to HTMLEmpty elements in SGML, HTML, XML, and XHTMLHTML special characters and symbolsHTML TutorialsHTML.netHTML DogCopy &amp; Paste HTML CodesHTML Markup ValidatorsW3C's Markup ValidatorOff-line HTML Validator v1.0 for WindowsValidator.nuStandard HTML specificationsRefer to the HTML version history sectionOther specificationsWeb Applications 1.0 A specification generally referred to as "HTML 5". The Web Hypertext Application Technology working group are an independent initiative who cooperate with the W3C.HTML Category:Computing acronyms Category:Markup languages Category:Technical communication Category:World Wide Web Consortium standardsaf:HTML als:HTML ar:لغة ترميز النص الفائق an:HTML az:HTML bn:হাইপার টেক্সট মার্ক আপ ল্যাঙ্গুয়েজ be-x-old:HTML bs:HTML br:HTML bg:HTML ca:Hyper Text Markup Language cs:HyperText Markup Language cy:HTML da:Hypertext Markup Language de:Hypertext Markup Language et:HTML el:HTML es:HTML eo:HTML eu:HTML fa:اچ‌تی‌ام‌ال fo:HTML fr:Hypertext Markup Language fy:HTML fur:HTML ga:HTML gl:HTML ko:HTML hi:एच.टी.एम.एल. hsb:HTML hr:HTML id:Hypertext markup language ia:HTML is:HTML it:HTML he:HTML ka:ჰიპერტექსტური მარკირების ენა kk:HTML ku:HTML lv:HTML lb:Hypertext Markup Language lt:HTML lmo:HTML hu:HTML mk:HTML ml:എച്.ടി.എം.എല്‍. ms:HTML mn:HTML nl:HyperText Markup Language ja:HyperText Markup Language no:HTML nn:HTML uz:HTML km:HTML pl:HTML pt:HTML kaa:HTML ro:HyperText Markup Language ru:HTML sq:HTML simple:HTML sk:Hypertext markup language sl:HTML sr:HTML sh:HTML fi:HTML sv:HTML tl:HTML th:HTML vi:HTML tg:HTML tr:Zengin metin işaretleme dili uk:HTML ur:وراۓمتن زبان تدوین yi:HTML zh-yue:HTML bat-smg:HTML zh:HTML