 | designer = Grace Hopper, William Selden, Gertrude Tierney, Howard Bromberg, Howard Discount, Vernon Reeves, Jean E. Sammet | latest release version = COBOL 2002 | latest release date = 2002 | typing = strong, static | implementations = OpenCobol.org, MicroFocus.com | dialects = HP3000 COBOL/II, COBOL/2, IBM OS/VS COBOL, IBM COBOL/II, IBM COBOL SAA, IBM Enterprise COBOL, IBM COBOL/400, IBM ILE COBOL, Unix COBOL X/Open, Micro Focus COBOL, Microsoft COBOL, Ryan McFarland RM/COBOL, Ryan McFarland RM/COBOL-85, DOSVS COBOL, UNIVAC COBOL, Realia COBOL, Fujitsu COBOL, ACUCOBOL-GT, DEC VAX COBOL, Wang VS COBOL | influenced_by = FLOW-MATIC, COMTRAN | influenced = PL/I, CobolScript  COBOL () is one of the oldest programming languages still in active use. Its name is an acronym for 'CO'mmon 'B'usiness-'O'''riented '''L'anguage, defining its primary domain in business, finance, and administrative systems for companies and governments.The COBOL 2002 standard includes support for object-oriented programming and other modern language features.History and specificationA specification of COBOL was initially created during the second half of 1959. The scene was set on April 8 at a meeting of computer manufacturers, users and university people at the University of Pennsylvania Computing Center and subsequently the United States Department of Defense agreed to sponsor and oversee the next activities. A meeting was held at the Pentagon on May 28 and 29 (exactly one year after the ZÃ¼rich ALGOL 58 meeting), chaired by Charles A. Phillips. There it was decided to set up three committees, short, intermediate and long range (the last one was actually never formed). It was the Short Range Committee, chaired by Joseph Wegstein of the US National Bureau of Standards, that during the next months would create a description of the first version of Cobol. The committee was formed to recommend a short range approach to a common business language. The committee was made up of members representing six computer manufacturers and three government agencies. The six computer manufacturers were Burroughs Corporation, IBM, Minneapolis-Honeywell (Honeywell Labs), RCA, Sperry Rand, and Sylvania Electric Products. The three government agencies were the US Air Force, the David Taylor Model Basin, and the National Bureau of Standards (now National Institute of Standards and Technology). The intermediate-range committee was formed but never became operational. In the end a sub-committee of the Short Range Committee developed the specifications of the COBOL language. This sub-committee was made up of six individuals:William Selden and Gertrude Tierney of IBMHoward Bromberg and Howard Discount of RCAVernon Reeves and Jean E. Sammet of Sylvania Electric ProductsThis subcommittee completed the specifications for COBOL in December 1959. The specifications were to a great extent inspired by the FLOW-MATIC language invented by Grace Hopper, commonly referred to as "the mother of the COBOL language", and the IBM COMTRAN language invented by Bob Bemer.The name COBOL was decided upon at a meeting of the committee held on 18 Sept. 1959.The first compilers for COBOL were subsequently implemented during the year 1960 and on 6 and 7 Dec. essentially the same COBOL program was run on two different makes of computers, an RCA computer and a Remington-Rand Univac computer, demonstrating that compatibility could be achieved.Since 1959 COBOL has undergone several modifications and improvements. In an attempt to overcome the problem of incompatibility between different versions of COBOL, the American National Standards Institute (ANSI) developed a standard form of the language in 1968. This version was known as American National Standard (ANS) COBOL. In 1974, ANSI published a revised version of (ANS) COBOL, containing a number of features that were not in the 1968 version. In 1985, ANSI published still another revised version that had new features not in the 1974 standard. The language continues to evolve today. Object-oriented COBOL is a subset of COBOL 97, which is the fourth edition in the continuing evolution of ANSI/ISO standard COBOL. COBOL 97 includes conventional improvements as well as object-oriented features. Like the C++ programming language, object-oriented COBOL compilers are available even as the language moves toward standardization.History of COBOL standardsThe specifications approved by the full Short Range Committee were approved by the Executive Committee on January 3 1960, and sent to the government printing office, which edited and printed these specifications as Cobol 60.The American National Standards Institute (ANSI) has since produced several revisions of the COBOL standard, including:COBOL-68COBOL-74COBOL-85COBOL 2002From 2002, the ISO standard is also available to the public coded as ISO/IEC 1989.Defining featuresCOBOL as defined in the original specification included a PICTURE clause for detailed field specification. It did not support local variables, recursion, dynamic memory allocation, or structured programming constructs. Support for some or all of these features has been added in later editions of the COBOL standard.COBOL has many reserved words (over 400), called keywords. The original COBOL specification supported self-modifying code via the infamous "ALTER X TO PROCEED TO Y" statement. This capability has since been removed.LegacyCOBOL programs are in use globally in governmental and military agencies, in commercial enterprises, and on operating systems such as IBM's z/OS, Microsoft's Windows, and the POSIX families (Unix/Linux etc.). In 1997, the Gartner Group reported that 80% of the world's business ran on COBOL with over 200 billion lines of code in existence and with an estimated 5 billion lines of new code annually.Near the end of the twentieth century the year 2000 problem was the focus of significant COBOL programming effort, sometimes by the same programmers who had designed the systems decades before. The particular level of effort required for COBOL code has been attributed both to the large amount of business-oriented COBOL, as COBOL is by design a business language and business applications use dates heavily, and to constructs of the COBOL language such as the PICTURE clause, which can be used to define fixed-length numeric fields, including two-digit fields for years.Hello, world       IDENTIFICATION DIVISION.
       PROGRAM-ID. HELLO-WORLD.
       ENVIRONMENT DIVISION.        
       DATA DIVISION.
       PROCEDURE DIVISION.
       MAIN.
           DISPLAY 'Hello, world.'.
           STOP RUN. CriticismCritics have argued that COBOL's syntax serves mainly to increase the size of programs, at the expense of developing the thinking process needed for software development. In his letter to an editor in 1975 titled "How do we tell truths that might hurt?", computer scientist and Turing Award recipient Edsger Dijkstra remarked that "The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offense".COBOL 85 was not compatible with earlier versions, resulting in the "cesarean birth of COBOL 85". Joseph T. Brophy, CIO, Travelers Insurance, spearheaded an effort to inform users of COBOL of the heavy reprogramming costs of implementing the new standard. As a result the ANSI COBOL Committee received more than 3,200 letters from the public, mostly negative, requiring the committee to make changes.Older versions of COBOL lack local variables and so cannot truly support structured programming.Others criticize the ad hoc incorporation of features on a language that was meant to be a short term solution to interoperability in 1959. Coupled with the perceived archaic syntax, they argue that it tries to fill a niche for which better tools have already been designed and developed.DefenseThe COBOL specification has also been revised over the years to incorporate developments in computing theory and practice .As with any language, COBOL code can be made more verbose than necessary. For example, one of the roots of the quadratic equation ax2&nbsp;+&nbsp;bx&nbsp;+&nbsp;c&nbsp;=&nbsp;0, which are:x=\frac , can be coded in COBOL using the "compute" verb as:      COMPUTE X = (-B + SQRT(B ** 2 - (4 * A * C)) / (2 * A)The same formula could also be written less concisely as:      MULTIPLY B BY B GIVING B-SQUARED.  
      MULTIPLY 4 BY A GIVING FOUR-A.  
      MULTIPLY FOUR-A BY C GIVING FOUR-A-C.  
      SUBTRACT FOUR-A-C FROM B-SQUARED GIVING RESULT-1.  
      COMPUTE RESULT-2 = RESULT-1 ** .5.
      SUBTRACT B FROM RESULT-2 GIVING NUMERATOR.
      MULTIPLY 2 BY A GIVING DENOMINATOR.
      DIVIDE NUMERATOR BY DENOMINATOR GIVING X.Which form to use is a matter of style. In some cases the less concise form may be easier to read. For example:      ADD YEARS TO AGE.
      MULTIPLY PRICE BY QUANTITY GIVING COST.
      SUBTRACT DISCOUNT FROM COST GIVING FINAL-COST.Older versions of COBOL supported local variables via embedded programs (scope-delimited by the keywords PROGRAM-ID and END-PROGRAM). Variables declared within the embedded program are invisible outside its scope. Also, local variables could be accomplished via separately compiled sub-programs. Newer COBOL compilers support the LOCAL-STORAGE section for local variables.Syntactic featuresCOBOL provides an update-in-place syntax, for example      ADD YEARS TO AGE.The equivalent construct in many procedural languages would be      age = age + yearsThis syntax is similar to the compound assignment operator later adopted by C:      age += yearsThe abbreviated conditional expression      IF SALARY &gt; 9000 OR SUPERVISOR-SALARY OR = PREV-SALARYis equivalent to      IF SALARY &gt; 9000 
      OR SALARY &gt; SUPERVISOR-SALARY 
      OR SALARY = PREV-SALARYCOBOL provides "named conditions" (so-called 88-levels). These are declared as sub-items of another item (the conditional variable). The named condition can be used in an IF statement, and tests whether the conditional variable is equal to any of the values given in the named condition's VALUE clause. The SET statement can be used to make a named condition TRUE (by assigning the first of its values to the conditional variable).COBOL allows identifiers to be up to 30 characters long. When COBOL was introduced, much shorter lengths (e.g., 6 characters for FORTRAN) were prevalent.Data typesStandard COBOL provides the following data types:Data typeSample declarationNotesCharacterPIC]] X(20)PIC A(4)9(5)X(7)Alphanumeric and alphabetic-onlySingle-byte character set (SBCS)Edited characterPIC X99BAXXFormatted and inserted charactersNumeric fixed-point binaryPIC S999V99 USAGE COMPUTATIONALBinary 16, 32, or 64 bits (2, 4, or 8 bytes) Signed or unsignedNumeric fixed-point packed decimalPIC S999V99 USAGE PACKED-DECIMAL1 to 18 decimal digits (1 to 10 bytes) Signed or unsignedNumeric fixed-point zoned decimalPIC S999V991 to 18 decimal digits (1 to 18 bytes) Signed or unsignedNumeric floating-pointPIC S9V999ES99Binary floating-pointEdited numericPIC +Z,ZZ9.99PIC $***,**9.99CRFormatted characters and digitsrecord]])''01 CUST-NAME. &nbsp;&nbsp;05 CUST-LAST PIC X(20). &nbsp;&nbsp;05 CUST-FIRST PIC X(20).Aggregated elementsTable]] (array)OCCURS 12 TIMESFixed-size array, row-major order Up to 7 dimensionsVariable-length table]]OCCURS 0 to 12 TIMES DEPENDING ON CUST-COUNTVariable-sized array, row-major order Up to 7 dimensionsvariant]] or union data)''66 RAW-RECORD &nbsp;&nbsp;RENAMES CUST-RECORDCharacter data overlaying other variablesCondition name88 IS-RETIRED-AGE &nbsp;&nbsp;VALUES 65 THRU 150Boolean value dependent upon another variableArray indexUSAGE INDEXArray subscriptMost vendors provide additional types, such as:Data typeSample declarationNotesNumeric fixed-point binary in native byte orderPIC S999V99 USAGE COMPUTATIONAL-4Binary 16, 32, or 64 bits (2, 4, or 8 bytes) Signed or unsignedNumeric fixed-point binary in big-endian byte orderPIC S999V99 USAGE COMPUTATIONAL-5Binary 16, 32, or 64 bits (2, 4, or 8 bytes) Signed or unsignedWide characterPIC G(20)AlphanumericDouble-byte character set (DBCS)Edited wide characterPIC G99BGGGFormatted and inserted wide charactersEdited floating-pointPIC +9.9(6)E+99Formatted characters and decimal digitsData pointerUSAGE POINTERData memory addressCode pointerUSAGE PROCEDURE-POINTERCode memory addressAphorisms and humor about COBOLIt has been said of languages like C, C++, and Java that the only way to modify legacy code is to rewrite it - write once and write once again; or write once and throw away. On the other hand, it has been said of COBOL that there actually is one original COBOL program, and it has only been copied and modified millions of times.The name "ADD 1 TO COBOL GIVING COBOL" has been suggested for a hypothetical object-oriented dialect of COBOL, as a play on the name C++. While this is meant to suggest that COBOL is inherently verbose, the form given is more verbose than COBOL actually requires; the succinct form would be "ADD 1 TO COBOL".Another suggested name is "POSTINCREMENT COBOL BY 1", which not only reflects the verbose nature of COBOL statements, but also highlights the tendency for COBOL features to require their own dedicated reserved keywords (standard COBOL employs over 400 reserved words), this example being the case for a hypothetical new POSTINCREMENT operator.COBOL 2002 and object-oriented COBOLThe COBOL2002 standard supports Unicode, XML generation and parsing, calling conventions to and from non-COBOL languages such as C, and support for execution within framework environments such as Microsoft's .NET and Java (including COBOL instantiated as Enterprise JavaBeans). Fujitsu and Micro Focus currently supports object oriented COBOL compilers targeting the .NET framework.NetCOBOL for .NET supports COBOL migration and software development in the .NET environment&lt;!-- Bot generated title --&gt;See alsoAlphabetical list of programming languagesOther third-generation programming languages ALGOLAPLBASICCC++C#FORTRANJavaLisp - ISO/IEC 13816Pascal, Object Pascal, Extended PascalPL/IRPGOtherComparison of programming languagesBurroughs B2000References  tags--SourcesEbbinkhuijsen, Wim B.C., COBOL Alphen aan den Rijn/Diegem: Samson Bedrijfsinformatie bv, 1990. ISBN 90-14-04560-3. (Dutch)External linksCOBOL-Standard CommitteeCOBOLwareCOBOL TutorialCOBOL Virtual MachineIBM COBOL compilersIBM COBOL documentation (iSeries Information Center)Mainframe COBOL CommunityOpenCOBOL: Open-source COBOL compilerAdd1tocobol: COBOL advocacy projectMicro Focus COBOLWildcat Cobol - Open-source .NET compilerDescription from another wikiSolution for COBOL to serialize and de-serialize XMLCobol User's Group has an extensive collection of linksArticle "Cobol: Not Dead Yet" by Robert MitchellArticle "Cobol Coders: Going, Going, Gone?" by Gary AnthesCategory:COBOL Category:Object-oriented programming languages Category:.NET programming languagesaf:COBOL ar:ÙÙØ¨ÙÙ az:KOBOL bn:à¦à§à¦¬à§à¦² bs:COBOL bg:COBOL ca:COBOL cs:COBOL da:COBOL de:COBOL el:COBOL es:COBOL eo:COBOL fr:COBOL ga:COBOL gl:Cobol ko:ì½ë³¼ hr:COBOL id:COBOL ia:COBOL it:COBOL he:COBOL ka:áááááá lt:COBOL hu:COBOL ms:COBOL nl:COBOL ja:COBOL no:COBOL pl:COBOL pt:COBOL ro:Cobol ru:ÐÐÐÐÐ sk:COBOL sl:COBOL sr:ÐÐ¾Ð±Ð¾Ð» (Ð¿ÑÐ¾Ð³ÑÐ°Ð¼ÑÐºÐ¸ ÑÐµÐ·Ð¸Ðº) sh:COBOL fi:COBOL sv:COBOL ta:à®à¯à®ªà®¾à®²à¯ à®¨à®¿à®°à®²à®¾à®à¯à® à®®à¯à®´à®¿ th:à¸ à¸²à¸©à¸²à¹à¸à¸à¸­à¸¥ vi:COBOL tg:ÐÐÐÐÐ tr:COBOL uk:COBOL zh:COBOL