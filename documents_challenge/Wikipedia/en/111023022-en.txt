8]]Security-Enhanced Linux (SELinux) is a Linux feature that provides a variety of security policies, including U.S. Department of Defense style mandatory access controls, through the use of Linux Security Modules (LSM) in the Linux kernel. It is not a Linux distribution, but rather a set of modifications that can be applied to Unix-like operating systems, such as Linux and BSD. Its architecture strives to streamline the volume of software charged with security policy enforcement, which is closely aligned with the Trusted Computer System Evaluation Criteria (TCSEC, referred to as Orange Book) requirement for trusted computing base (TCB) minimization (applicable to evaluation classes B3 and A1) but is quite unrelated to the least privilege requirement (B2, B3, A1) as is often claimed. The germinal concepts underlying SELinux can be traced to several earlier projects by the U.S. National Security Agency.OverviewPrimarily developed by the US National Security Agency, it was released to the open source development community under the GPL on December 22, 2000 and merged into the mainline kernel 2.6.0-test3, released on 8 August 2003. Other significant contributors include Network Associates, Secure Computing Corporation, Trusted Computer Solutions, and Tresys. Experimental ports of the FLASK/TE implementation have been made available via the TrustedBSD Project for the FreeBSD and Darwin operating systems.From NSA Security-enhanced Linux Team:"NSA Security-enhanced Linux is a set of patches to the Linux kernel and some utilities to incorporate a strong, flexible mandatory access control (MAC) architecture into the major subsystems of the kernel. It provides a mechanism to enforce the separation of information based on confidentiality and integrity requirements, which allows threats of tampering and bypassing of application security mechanisms to be addressed and enables the confinement of damage that can be caused by malicious or flawed applications. It includes a set of sample security policy configuration files designed to meet common, general-purpose security goals."(SELinux has been integrated into version 2.6 series of the Linux kernel, and separate patches are now unnecessary; the above is a historical quote.)Security-Enhanced Linux is a FLASK implementation integrated in some versions of the Linux kernel with a number of utilities designed to demonstrate the value of mandatory access controls to the Linux community and how such controls could be added to Linux. Such a kernel contains architectural components prototyped in the Fluke operating system. These provide general support for enforcing many kinds of mandatory access control policies, including those based on the concepts of type enforcement, role-based access control, and multi-level security. Observers of operating system security research may recall DTOS, a Mach-derived Distributed Trusted Operating System, on which Flask was based, as well as Trusted Mach, a research project from Trusted Information Systems that was influential in the design and implementation of DTOS. Those interested in Type Enforcement may also be interested in Domain and Type Enforcement.A Linux kernel integrating SELinux enforces mandatory access control policies that confine user programs and system servers to the minimum amount of privilege they require to do their jobs. This reduces or eliminates the ability of these programs and daemons to cause harm when compromised (via buffer overflows or misconfigurations, for example). This confinement mechanism operates independently of the traditional Linux access control mechanisms. It has no concept of a "root" super-user, and does not share the well-known shortcomings of the traditional Linux security mechanisms (such as a dependence on setuid/setgid binaries).The security of an unmodified Linux system depends on the correctness of the kernel, all the privileged applications, and each of their configurations. A problem in any one of these areas may allow the compromise of the entire system. In contrast, the security of a modified system based on an SELinux kernel depends primarily on the correctness of the kernel and its security policy configuration. While problems with the correctness or configuration of applications may allow the limited compromise of individual user programs and system daemons, they do not pose a threat to the security of other user programs and system daemons or to the security of the system as a whole.From a puristic perspective, SELinux provides a hybrid of concepts and capabilities drawn from mandatory access controls, mandatory integrity controls, role-based access control (RBAC), and type enforcement architecture. Third-party tools enable one to build a variety of security policies.FeaturesClean separation of policy from enforcementWell-defined policy interfacesSupport for applications querying the policy and enforcing access control (for example, crond running jobs in the correct context)Independent of specific policies and policy languagesIndependent of specific security label formats and contentsIndividual labels and controls for kernel objects and servicesCaching of access decisions for efficiencySupport for policy changesSeparate measures for protecting system integrity (domain-type) and data confidentiality (MLS aka Multilevel security)Very flexible policyControls over process initialization and inheritance and program executionControls over file systems, directories, files, and open file descriptorsControls over sockets, messages, and network interfacesControls over use of "capabilities"ImplementationsSELinux is available with commercial support as part of Red Hat Enterprise Linux (RHEL) version 4 and all future releases. The supported policy in RHEL4 is the targeted policy which aims for maximum ease of use and thus is not as restrictive as it might be. Future versions of RHEL will have more targets in the targeted policy which will mean more restrictive policies.In free community supported Linux distributions, SELinux is supported in Debian as of the etch release SELinux in Debian, Ubuntu as of 8.04 Hardy Heron SELinux support for Ubuntu , Fedora since version 2, Hardened Gentoo, and Yellow Dog Linux.It is also supported in EnGarde Secure Linux which requires registration to download.There was some work to provide SELinux packages for SUSESUSE and Slackware SELinux slackware, but development seems to have stopped (the files are old).There has been work on other distributions such as Familiar, but some of this was ceased due to technical reasons (the Familiar work was abandoned when SELinux needed extended attributes which were not supported in the JFFS2 filesystem).The earliest work directed toward standardizing an approach toward provision of mandatory and discretionary access controls (MAC & DAC) within a UNIX (more precisely, POSIX) computing environment can be attributed to the National Security Agency's Trusted UNIX (TRUSIX) Working Group, which met from 1987 to 1991 and published one Rainbow Book (#020A) and produced a formal model and associated evaluation evidence prototype (#020B) that was ultimately unpublished. Sponsored by Chet Coates and Mario Tinto of the NSA's National Computer Security Center, and managed by Charles Testa of Infosystems Technology, the crucial architects of the TRUSIX project &mdash; and members of its Modelling Subcommittee &mdash; were Steve Bunch, Frank Knowles, Eric Roskos, Larry Wehr, and Bruce Wilner. (Testa and Wilner also briefly chaired the NSA Labelling Subcommittee &mdash; which counted among its membership to David Bell, Marv Schaefer, and Willis Ware &mdash; as well as building Trusted RUBIX, the only relational database management system to offer B2 functionality and assurance atop a B2 POSIX platform, partially under the auspices of the United States Air Force Rome Laboratory.) Their efforts, particularly as critics of the less technically profound work of the TRUSIX Access Control List (ACL) Subcommittee, survive in the IEEE POSIX 1003.6 "security extensions for portable operating systems environments" specification.Other systemsSELinux represents one of several possible approaches to the problem of restricting the actions that installed software can take.The AppArmor system generally takes a similar approach to SELinux. One important difference is that it identifies file system objects by path name instead of inode. This means that, for example, a file that is inaccessible may become accessible under AppArmor when a hard link is created to it, while SELinux would deny access through the newly created hard link. On the other hand, data that is inaccessible may become accessible when applications update the file by replacing it with a new version (a frequently used technique), while AppArmor would continue to deny access to the data. (In both cases, a default policy of "no access" avoids the problem.)While there has been considerable debate about which approach is better, there is no strong evidence as of yet that one approach is preferable to the other.Note also that existing access control mechanisms remain in place with either system.SELinux and AppArmor also differ significantly in how they are administered and how they integrate into the system.Isolation of processes can also be accomplished by mechanisms like virtualization; the OLPC project, for example, sandboxes individual applications in lightweight Vservers.See also AppArmorCapabilityComputer securitygrsecurityLinuxList of Linux distributionsNSARule Set Based Access Control (RSBAC)TrustedBSDSolaris Trusted ExtensionsSystraceMultilevel securityQuotes“Let me assure you that this action by the NSA was the crypto-equivalent of the Pope coming down off the balcony in Rome, working the crowd with a few loaves of bread and some fish, and then inviting everyone to come over to his place to watch the soccer game and have a few beers. There are some things that one just never expects to see, and the NSA handing out source code along with details of the security mechanism behind it was right up there on that list.” &mdash; Larry Loeb http://www-128.ibm.com/developerworks/library/s-selinux/?n-s-381“...given the threat models and capabilities of the adversaries involved, that's probably appropriate... But that’s not necessarily appropriate for all users. SELINUX is so horrible to use, that after wasting a large amount of time enabling it and then watching all of my applications die a horrible death since they didn't have the appropriate hand-crafted security policy, caused me to swear off of it. For me, given my threat model and how much my time is worth, life is too short for SELinux.” — Theodore Ts’o http://kerneltrap.org/Linux/Pluggable_SecurityReferencesExternal linksUS National Security Agency's Security-Enhanced Linux websiteNSA press release: NSA shares security enhancements to LinuxMailing list announcement of availabilitySELinux information for various Linux distributionsAnatomy of Security-Enhanced Linux by M. Tim JonesCategory:Operating system security Category:Linux security software Category:Linux kernel features Category:National Security Agencycs:SELinux de:SELinux es:SELinux fr:SELinux nl:Security-Enhanced Linux ja:SELinux pl:Security-Enhanced Linux pt:SELinux ru:SELinux fi:SELinux zh:SELinux