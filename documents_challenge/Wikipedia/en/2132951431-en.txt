  'sed ' ('S'tream 'ED'itor) refers to a Unix utility which (a) parses text files and (b) implements a programming language which can apply textual transformations to such files. It reads input files line by line (sequentially), applying the operation which has been specified via the command line (or a sed script), and then outputs the line. It was developed from 1973 to 1974 as a Unix utility by Lee E. McMahon of Bell Labs, and is available today for most operating systems.UsageThe following example shows a typical use of sed, where the ''-e'' option indicates that the sed expression follows:sed -e 's/oldstuff/newstuff/g' inputFileName &gt; outputFileNameIn many versions, the ''-e'' is not required to precede the expression. The s'' stands for substitute. The ''g stands for global, which means that all matching occurrences in the line would be replaced. The regular expression (i.e. pattern) to be searched is placed after the first delimiting symbol (slash here) and the replacement follows the second symbol. Slash is the conventional symbol. Any other could be used to make syntax more readable if it does not occur in the pattern or replacement (see below).Under Unix, sed is often used as a filter in a pipeline:generate_data | sed -e 's/x/y/g'That is, generate the data, and then make the small change of replacing x'' with ''y.Several substitutions or other commands can be put together in a file called, for example, subst.sed and then be applied using the ''-f'' option to read the commands from the file:sed -f subst.sed inputFileName &gt; outputFileNameBesides substitution, other forms of simple processing are possible. For example, the following uses the d command to delete lines that are either blank or only contain spaces:sed -e '/^ *$/d' inputFileName This example used some of the following regular expression metacharacters:The caret (^) matches the beginning of the line.The dollar sign ($) matches the end of the line.A period (.) matches any single character.The asterisk (*) matches zero or more occurrences of the previous character.A bracketed expression delimited by and &lt;code&gt; matches any of the characters inside the brackets.Complex sed constructs are possible, allowing it to serve as a simple, but highly specialised, programming language. Flow of control, for example, can be managed by the use of a label (a colon followed by a string) and the branch instruction b''. An instruction ''b followed by a valid label name will move processing to the block following that label. If the label does not exist then the branch will end the script.Historysed is one of the very early Unix commands built for command line processing of data files. It evolved as the natural successor to the popular grep command.   Cousin to the later AWK, sed allowed powerful and interesting data processing to be done by shell scripts.sed and AWK are often cited as the progenitors and inspiration for Perl. The s/// syntax shown above is part of Perl's syntax and originated with ed, the precursor to sed.sed's language does not have variables and has only primitive GOTO and branching functionality; nevertheless, the language is Turing-complete.     GNU sed includes several new features such as in-place editing of files (i.e., replace the original file with the result of applying the sed program). In-place editing is often used instead of ed scripts: for example,sed -i 's/abc/def/' filecan be used instead ofed file
1,$ s/abc/def/
w
qSuper-sed is an extended version of sed that includes regular expressions compatible with Perl.Another variant of sed is minised, originally reverse-engineered from the 4.1BSD sed by Eric S. Raymond and currently maintained by René Rebe. minised was used by the GNU project until the GNU project wrote a new version of sed based on the new GNU regular expression library. The current minised contains some extensions to BSD sed but is not as feature-rich as GNU sed. Its advantage is that it is very fast and uses little memory. It is used on embedded systems and is the version of sed provided with Minix.SamplesIn this example, sed, which usually only works on one line, removes newlines from sentences where the second sentence starts with one space.Consider the following text:This is my cat
 my cat's name is betty
This is my dog
 my dog's name is frankThe sed script below will turn it into:This is my cat my cat's name is betty
This is my dog my dog's name is frankHere's the script:sed 'N;s/\n / /;P;D;'(N) add the next line to the work buffer(s) substitute(/\n /) match: \n (newline character in Unix) and one space(/ /) replace with: one space(P) print the top line of the work buffer(D) delete the top line from the work buffer and run the script againThe context addressConditioned commands are possible using the "context address":/addr-pattern/s/search-pattern/replacement/flagsor more readable variants:/addr-pattern/s~search-pattern~replacement~flags/addr-pattern/s,search-pattern,replacement,flagsHere, 'addr-pattern' is the address, which defines lines, where substitution of 'search-pattern' with 'replacement' will be done.Likewise:/addr-pattern/!s,search-pattern,replacement,flagssubstitute will be executed if no 'addr-pattern' was matched.For example, replace "world" with "mom", but only on lines which contain the word "you":sh$ sed -e '/you/s,world,mom,g' &lt;&lt;&quot; EOF&quot;
Hello world.
Hello world. I love you.
EOF
Hello world.
Hello mom. I love you.
sh$Negation will be:sh$ sed -e '/you/!s,world,mom,g' &lt;&lt;&quot; EOF&quot;
Hello world.
Hello world. I love you.
EOF
Hello mom.
Hello world. I love you.
sh$Exotic examplesDespite the inherent limitations, sed scripts exist for games as sokoban, arkanoid  , and a recent implementation of tetris.  Further readingThe sed FAQGNU sed manualReferencesSee alsoList of Unix programsExternal linksMajor sources for sed scripts, files, usageHandy one-line sed scriptsSed script archiveA home page for sed, some focus on Windows/DOSA calculator written in sedSuper-sedsed TutorialThe sed tutorial from GrymoireGNU utilities for Win32More on the address command and sub-matched replacementsMinised homepagePCRE - Perl Compatible Regular ExpressionsThe A-Z of Programming Languages: AWKCommon threads: Sed by example, Part 1 by Daniel RobbinsCommon threads: Sed by example, Part 2 by Daniel RobbinsCommon threads: Sed by example, Part 3 by Daniel RobbinsCategory:Domain-specific programming languages Category:Text-oriented programming languages Category:Scripting languages Category:Unix software Category:Free compilers and interpretersals:Sed cs:Sed de:Sed (Unix) es:Sed (informática) fr:Sed (logiciel) nl:Stream Editor ja:Sed (コンピュータ) pl:Sed (program) pt:Sed ro:Sed ru:Sed fi:Sed