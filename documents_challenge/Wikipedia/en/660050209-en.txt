In computing, a device driver or software driver is a computer program allowing higher-level computer programs to interact with a hardware device.A driver typically communicates with the device through the computer bus or communications subsystem to which the hardware is connected. When a calling program invokes a routine in the driver, the driver issues commands to the device. Once the device sends data back to the driver, the driver may invoke routines in the original calling program. Drivers are hardware-dependent and operating-system-specific. They usually provide the interrupt handling required for any necessary asynchronous time-dependent hardware interface.PurposeA device driver simplifies programming by acting as a translator between a device and the applications or operating systems that use it. The higher-level code can be written independently of whatever specific hardware device it may control. Every version of a device, such as a printer, requires its own specialized commands. In contrast, most applications access devices (such as sending a file to a printer) by using high-level, generic commands, such as PRINTLN. The driver accepts these generic statements and converts them into the low-level commands required by the device.DesignDevice drivers can be abstracted into logical and physical layers. Logical layers process data for a class of devices such as ethernet ports or disk drives. Physical layers communicate with specific device instances. For example, a serial port needs to handle standard communication protocols such as XON/XOFF that are common for all serial port hardware. This would be managed by a serial port logical layer. However, the logical layer needs to communicate with a particular serial port chip. 16550 UART hardware differs from PL-011. The physical layer addresses these chip-specific variations. Conventionally, OS requests go to the logical layer first. In turn, the logical layer calls upon the physical layer to implement OS requests in terms understandable by the hardware. Inversely, when a hardware device needs to respond to the OS, it uses the physical layer to speak to the logical layer.In Linux, device drivers can be built either as parts of the kernel or separately as loadable modules. Makedev includes a list of the devices in Linux: ttyS (terminal), lp (parallel port), hd (disk), loop (loopback disk device), sound (these include mixer, sequencer, dsp, and audio)... MAKEDEV - Linux Command - Unix Command&lt;!-- Bot generated title --&gt;The Windows .sys files and Linux .ko modules are loadable device drivers. The advantage of loadable device drivers is that they can be loaded only when necessary and then unloaded, thus saving kernel memory.DevelopmentWriting a device driver requires an in-depth understanding of how the hardware and the software of a given platform function. Drivers "...operate in a highly privileged environment and can cause disaster if they get things wrong..."  In contrast, most user-level software on modern operating systems can be stopped without greatly affecting the rest of the system. Even drivers executing in user mode can crash a system if the device is erroneously programmed. These factors make it more difficult and dangerous to diagnose problems.Thus drivers are usually written by software engineers who come from the companies that develop the hardware. This is because they have better information than most outsiders about the design of their hardware. Moreover, it was traditionally considered in the hardware manufacturer's interest to guarantee that their clients can use their hardware in an optimum way. Typically, the logical device driver (LDD) is written by the operating system vendor, while the physical device driver (PDD) is implemented by the device vendor. But in recent years non-vendors have written numerous device drivers, mainly for use with free operating systems. In such cases, it is important that the hardware manufacturer provides information on how the device communicates. Although this information can instead be learned by reverse engineering, this is much more difficult with hardware than it is with software.Microsoft has attempted to reduce system instability due to poorly written device drivers by creating a new framework for driver development, called Windows Driver Foundation (WDF). This includes User-Mode Driver Framework (UMDF) that encourages development of certain types of drivers - primarily those that implement a message-based protocol for communicating with their devices - as user mode drivers. If such drivers malfunction, they do not cause system instability. The Kernel-Mode Driver Framework (KMDF) model continues to allow development of kernel-mode device drivers, but attempts to provide standard implementations of functions that are well known to cause problems, including cancellation of I/O operations, power management, and plug and play device support.Apple has an open-source framework for developing drivers on Mac OS X called the I/O Kit.Kernel-mode vs User-modeDevice drivers, particularly on modern Windows platforms, can run in kernel-mode (Ring 0) or in user-mode (Ring 3). The primary benefit of running a driver in user mode is improved stability, since a poorly written user mode device driver cannot crash the system by overwriting kernel memory. On the other hand, user-/kernel-mode transitions usually impose a considerable performance overhead, thereby prohibiting user-mode drivers for low latency and high throughput requirements.Device driver applicationsBecause of the diversity of modern hardware and operating systems, many ways exist in which drivers can be used. Drivers are used for interfacing with:PrintersVideo adaptersNetwork cardsSound cardsLocal buses of various sorts - in particular, for bus mastering on modern systemsLow-bandwidth I/O buses of various sorts (for pointing devices such as mice, keyboards, USB, etc.)computer storage devices such as hard disk, CD-ROM and floppy disk buses (ATA, SATA, SCSI)Implementing support for different file systemsImplementing support for image scanners and digital camerasCommon levels of abstraction for device drivers areFor hardware:Interfacing directlyWriting to or reading from a Device Control RegisterUsing some higher-level interface (e.g. Video BIOS)Using another lower-level device driver (e.g. file system drivers using disk drivers)Simulating work with hardware, while doing something entirely differentFor software:Allowing the operating system direct access to hardware resourcesImplementing only primitivesImplementing an interface for non-driver software (e.g. TWAIN)Implementing a language, sometimes quite high-level (e.g. PostScript)Choosing and installing the correct device drivers for given hardware is often a key component of computer system configuration.Virtual device driversA particular variant of device drivers are virtual device drivers. They are used to emulate a hardware device, particularly in virtualization environments, for example when an MS-DOS program is run on a Microsoft Windows computer or when a guest operating system is run on, for example, a Xen host. Instead of enabling the guest operating system to dialog with hardware, virtual device drivers take the opposite role and emulate a piece of hardware, so that the guest operating system and its drivers running inside a virtual machine can have the illusion of accessing real hardware. Attempts by the guest operating system to access the hardware are routed to the virtual device driver in the host operating system as e.g. function calls. The virtual device driver can also send simulated processor-level events like interrupts into the virtual machine.Virtual devices are also used in a non-virtualized environment. For example a virtual network adapter is used with a virtual private network, while a virtual disk device is used with iSCSI.Open driversPrinters: CUPS.Scanners: SANE.Video: Vidix, Direct Rendering InfrastructureSolaris descriptions of commonly used device driversfas: Fast/wide SCSI controllerhme: Fast (10/100 Mb/sec) Ethernetisp: Differential SCSI controllers and the SunSwift cardglm: UltraSCSI controllersscsi: Small Computer Serial Interface (SCSI) devicessf: soc+ or socal Fiber Channel Arbitrated Loop (FCAL)soc: SPARC Storage Array (SSA) controllerssocal: Serial optical controllers for FCAL (soc+)Driver APIsAdvanced Linux Sound Architecture (ALSA) - The standard modern Linux sound driver interfaceI/O Kit - an open-source framework from Apple for developing Mac OS X device driversInstallable File System (IFS) - a filesystem API for IBM OS/2 and Microsoft Windows NTNetwork Driver Interface Specification (NDIS) - a standard network card driver APIOpen Data-Link Interface (ODI) - a network card API similar to NDISScanner Access Now Easy (SANE) - a public domain interface to raster image scanner hardwareUniform Driver Interface (UDI) - a cross platform driver interface projectWindows Display Driver Model (WDDM) - the graphic display driver architecture for Windows VistaWindows Driver Foundation (WDF)Windows Driver Model (WDM)IdentifiersDevice id is the device identifier and Vendor id is the vendor identifier.See alsoClass driverFirmwareInterruptLoadable kernel moduleMakedevOpen source hardwarePrinter driverudevReferencesExternal linksMicrosoft Windows Hardware Developer CentralWriting Device Drivers: A TutorialIf you wish to have Linux drivers written for your deviceFree Linux Driver Development Questions and AnswersLinux hardwareLinux-Friendly HardwareCategory:Device drivers Category:Operating system technology Category:Digital electronics *Computer bus Category:Motherboardar:مشغل (برنامج حاسوبي) bs:Drajver ca:Programa de control cs:Ovladač zařízení da:Hardwaredriver de:Gerätetreiber es:Controlador de dispositivo eo:Pelilo fr:Pilote informatique ko:장치 드라이버 id:Device driver is:Rekill (tölvunarfræði) it:Driver he:מנהל התקן kk:Драйвер lv:Draiveris lb:Driver lt:Tvarkyklė hu:Hardver-illesztőprogram nl:Stuurprogramma ja:デバイスドライバ no:Driver nn:Drivar pl:Sterownik urządzenia pt:Driver de dispositivo ro:Driver ru:Драйвер simple:Device driver sk:Ovládač (informatika) sr:Драјвер fi:Laiteajuri sv:Drivrutin vi:Chương trình điều khiển uk:Драйвер zh-yue:驅動程式 zh:驱动程序