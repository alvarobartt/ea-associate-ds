Model-driven architecture (MDA) is a software design approach for the development of software systems. It provides a set of guidelines for the structuring of specifications, which are expressed as models. Model-driven architecture is a kind of domain engineering, and supports model-driven engineering of software systems. It was launched by the Object Management Group (OMG) in 2001.&quot;OMG pursues new strategic direction to build on success of past efforts&quot;OverviewThe Model-Driven Architecture approach defines system functionality using a platform-independent model (PIM) using an appropriate domain-specific language.Then, given a platform definition model (PDM) corresponding to CORBA, .NET, the Web, etc., the PIM is translated to one or more platform-specific models (PSMs) that computers can run.The PSM may use different Domain Specific Languages, or a General Purpose Language like Java, C#, PHP, Python, etc.. Automated tools generally perform this translation.The OMG organization provides rough specifications rather than implementations, often as answers to Requests for Proposals (RFPs). Implementations come from private companies or open source groups.MDA principles can also apply to other areas such as business process modeling where the PIM is translated to either automated or manual processes.MDA approachOMG focuses Model-driven architecture on forward engineering, i.e. producing code from abstract, human-elaborated specifications. OMG's ADTF (Analysis and Design Task Force) group leads this effort. With some humour, the group chose ADM (MDA backwards) to name the study of reverse engineering. ADM decodes to Architecture-Driven Modernization. The objective of ADM is to produce standards for model-based reverse engineering of legacy systems adm website http://adm.omg.org&lt;/ref&gt;. Knowledge Discovery Metamodel (KDM) is the furthest along of these efforts, and describes information systems in terms of various assets (programs, specifications, data, test files, database schemas, etc.).One of the main aims of the MDA is to separate design from architecture. As the concepts and technologies used to realize designs and the concepts and technologies used to realize architectures have changed at their own pace, decoupling them allows system developers to choose from the best and most fitting in both domains. The design addresses the functional (use case) requirements while architecture provides the infrastructure through which non-functional requirements like scalability, reliability and performance are realized. MDA envisages that the platform independent model (PIM), which represents a conceptual design realizing the functional requirements, will survive changes in realization technologies and software architectures.Of particular importance to model-driven architecture is the notion of model transformation. A specific standard language for model transformation has been defined by OMG called QVT.Related standardsThe MDA model is related to multiple standards, including the Unified Modeling Language (UML), the Meta-Object Facility (MOF), XML Metadata Interchange (XMI), Enterprise Distributed Object Computing (EDOC), the Software Process Engineering Metamodel (SPEM), and the Common Warehouse Metamodel (CWM). Note that the term “architecture” in Model-driven architecture does not refer to the architecture of the system being modeled, but rather to the architecture of the various standards and model forms that serve as the technology basis for MDA.The Executable UML approach Executable UML, often abbreviated to xtUML Example usage: http://www.techonline.com/community/tech_topic/37519&lt;/ref&gt; or xUML Example usage: http://www.kc.com/xuml.php&lt;/ref&gt;, is the evolution of the Shlaer-Mellor method to UML, it is a specific approach to implement MDA. Executable UML graphically specifies a deterministic system using a profile of the UML. The models are testable, and can be compiled into a less abstract programming language to target a specific implementation. Mellor, S; Balcer, M: "Executable UML: A foundation for model-driven architecture", Preface, Addison Wesley, 2002 Mellor, S; Balcer, M: "Executable UML: A foundation for model-driven architecture", chapter 1.4 Model Compilers, Addison Wesley, 2002 Executable UML supports MDA through specification of platform-independent models, and the compilation of the platform-independent models into platform-specific models. Mellor, S; Balcer, M: "Executable UML: A foundation for model-driven architecture", chapter 1.5 Model Driven Architecture, Addison Wesley, 2002MDA toolsThe OMG organization provides rough specifications rather than implementations, often as answers to Requests for Proposals (RFPs). The OMG documents the overall process in a document called the MDA Guide.Basically, an MDA tool is a tool used to develop, interpret, compare, align, measure, verify, transform, etc. models or metamodels.&lt;/ref&gt; In the following section "model" is interpreted as meaning any kind of model (e.g. a UML model) or metamodel (e.g. the CWM metamodel). In any MDA approach we have essentially two kinds of models: initial models are created manually by human agents while derived models are created automatically by programs. For example an analyst may create a UML initial model from its observation of some loose business situation while a Java model may be automatically derived from this UML model by a Model transformation operation.An MDA tool may be one or more of the following types:Creation Tool: A tool used to elicit initial models and/or edit derived models.Analysis Tool: A tool used to check models for completeness, inconsistencies, or error and warning conditions. Also used to calculate metrics for the model.Transformation Tool: A tool used to transform models into other models or into code and documentation.Composition Tool: A tool used to compose (i.e. to merge according to a given composition semantics) several source models, preferably conforming to the same metamodel.Test Tool: A tool used to "test" models as described in Model-based testing.Simulation Tool: A tool used to simulate the execution of a system represented by a given model. This is related to the subject of model execution.Metadata Management Tool: A tool intended to handle the general relations between different models, including the metadata on each model (e.g. author, date of creation or modification, method of creation (which tool? which transformation? etc.)) and the mutual relations between these models (i.e. one metamodel is a version of another one, one model has been derived from another one by a transformation, etc.)Reverse Engineering Tool: A tool intended to transform particular legacy or information artifact portfolios into full-fledged models.Some tools perform more than one of the functions listed above. For example, some creation tools may also have transformation and test capabilities. There are other tools that are solely for creation, solely for graphical presentation, solely for transformation, etc.One of the characteristics of MDA tools is that they mainly take models (e.g. MOF models or metamodels) as input and generate models as output. In some cases however the parameters may be taken outside the MDA space like in model to text or text to model transformation tools.Implementations of the OMG specifications come from private companies or open source groups. One important source of implementations for OMG specifications is the Eclipse Foundation. Many implementations of OMG modeling standards may be found in the Eclipse Modeling Framework (EMF) or Graphical Modeling Framework (GMF), the Eclipse foundation is also developing other tools of various profiles as GMT. Eclipse's compliance to OMG specifications is often not strict. This is true for example for OMG's EMOF standard, which Eclipse approximates with its ECORE implementation. More examples may be found in the M2M project implementing the QVT standard or in the M2T project implementing the MOF2Text standard.Power RAD is being developed by Outline Systems Inc. Microsoft is proposing the DSL tools approach which is a similar approach, not based on OMG standards. Another open source project called AndroMDA provides an extensible framework for generating code using virtually any technology/platform (e.g., .NET, Java, etc.) and is meant to be used repeatedly as part of the build process (i.e., instead of just generating starter code once at the beginning of a project).One should be careful not to confuse the List of MDA Tools and the List of UML tools, the former being much broader. This distinction can be made more general by distinguishing 'variable metamodel tools' and 'fixed metamodel tools'. A UML CASE tool is typically a 'fixed metamodel tool' since it has been hard-wired to work only with a given version of the UML metamodel (e.g. UML 2.1). On the contrary, other tools have internal generic capabilities allowing them to adapt to arbitrary metamodels or to a particular kind of metamodels.Usually MDA tools focus rudimentary architecture specification, although in some cases the tools are architecture-independent (or platform independent).Simple examples of architecture specifications include:Selecting one of a number of supported reference architectures like Java EE or Microsoft .NET,Specifying the architecture at a finer level including the choice of presentation layer technology, business logic layer technology, persistence technology and persistence mapping technology (e.g. object-relational mapper).Metadata: information about data.MDA concernsSome key concepts that underpin the MDA approach (launched in 2001) were first elucidated by the Shlaer-Mellor method during the late 1980s. Indeed a key absent technical standard of the MDA approach (that of an action language syntax for Executable UML) has been bridged by some vendors by adapting the original Shlaer-Mellor Action Language (modified for UML). However during this period the MDA approach has not gained mainstream industry acceptance; with the Gartner Group still identifying MDA as an "on the rise" technology in its 2006 "Hype Cycle"&quot;Hype Cycle for Emerging Technologies, 2006&quot; $495.00, and Forrester Research declaring MDA to be "D.O.A." in 2006&quot;MDA Is DOA, Partly Thanks To SOA&quot;. Potential concerns that have been raised with the OMG MDA approach include:Incomplete Standards: The MDA approach is underpinned by a variety of technical standards, some of which are yet to be specified (e.g. an action semantic language for xtUML), or are yet to be implemented in a standard manner (e.g. a QVT transformation engine or a PIM with a virtual execution environment).&quot;UML - Unified or Universal Modeling Language? UML2, OCL, MOF, EDOC - The Emperor Has Too Many Clothes&quot;&quot;MDA: Nice Idea. Shame about the...&quot;Vendor Lock-in: Although MDA was conceived as an approach for achieving (technical) platform independence, current MDA vendors have been reluctant to engineer their MDA toolsets to be interoperable. Such an outcome could result in vendor lock-in for those pursuing an MDA approach.Idealistic: MDA is conceived as a forward engineering approach in which models that incorporate Action Language programming are transformed into implementation artifacts (e.g. executable code, database schema) in one direction via a fully or partially automated "generation" step. This aligns with OMG's vision that MDA should allow modelling of a problem domain's full complexity in UML (and related standards) with subsequent transformation to a complete (executable) application&quot;Bringing MDA to Eclipse, using a pragmatic approach&quot;. This approach does, however, imply that changes to implementation artifacts (e.g. database schema tuning) are not supported . This constitutes a problem in situations where such post-transformation "adapting" of implementation artifacts is seen to be necessary. Evidence that the full MDA approach may be too idealistic for some real world deployments has been seen in the rise of so-called "pragmatic MDA"&quot;A Response to Forrester&quot;. Pragmatic MDA blends the literal standards from OMG's MDA with more traditional model driven mechanisms such as round-trip engineering that provides support for adapting implementation artifacts.Specialised Skillsets: Practitioners of MDA based software engineering are (as with other toolsets) required to have a high level of expertise in their field. Current expert MDA practitioners (often referred to as Modeller/Architects) are scarce relative to the availability of traditional developers.&quot;Are You Ready For the MDA?&quot;OMG Track Record: The OMG consortium who sponsor the MDA approach (and own the MDA trademark) also introduced and sponsored the CORBA standard which itself failed to materialise as a widely utilised standard&quot;The Rise and Fall of CORBA&quot;.Uncertain Value Proposition: As discussed, the vision of MDA allows for the specification of a system as an abstract model, which may be realized as a concrete implementation (program) for a particular computing platform (i.e. .NET). Thus an application that has been successfully developed via a pure MDA approach could theoretically be ported to a newer release .NET platform (or even a Java platform) in a deterministic manner &ndash; although significant questions remain as to real-world practicalities during translation (such as user interface implementation). Whether this capability represents a significant value proposition remains a question for particular adopters. Regardless, adopters of MDA who are seeking value via an "alternative to programming" should be very careful when assessing this approach. The complexity of any given problem domain will always remain, and the programming of business logic needs to be undertaken in MDA as with any other approach. The difference with MDA is that the programming language used (e.g. xtUML) is more abstract (than, say, Java or C#) and exists interwoven with traditional UML artifacts (e.g. class diagrams). Whether programming in a language that is more abstract than mainstream 3GL languages will result in systems of better quality, cheaper cost or faster delivery, is a question that has yet to be adequately answered.Code generation controversyCode generation means, that the user creates UML diagrams, which have some connoted model data, and the UML tool derives from the diagrams parts or all of the source code for the software system. In some tools, the user can provide a skeleton of the program source code, in the form of a source code template where predefined tokens are then replaced with program source code parts during the code generation process.There is some debate among software developers about how useful code generation as such is. It certainly depends on the specific problem domain and how far code generation should be applied. There are well known areas where code generation is an established practice, not limited to the field of UML.The idea of completely leaving the "code level" and start "programming" on the UML diagram level (i.e., design level) is quite debated among developers. That is the vision for MDA. This idea is not in such widespread use compared to other software development tools like compilers or software configuration management systems.An often cited criticism is that the UML diagrams just lack the detail which is needed to contain the same information as is covered with the program source. Some developers even claim that "the Code is the design" http://www.developerdotstar.com/mag/articles/reeves_design_main.html by Jack W. ReevesBleading-Edge&lt;!-- Bot generated title --&gt;.TrademarkThe Object Management Group holds trademarks on MDA, as well as several similar terms including Model Driven Development (MDD), Model Driven Application Development, Model Based Application Development, Model Based Programming, and others. The main acronym that has not yet been deposited by OMG until now is MDE. As a consequence, the research community uses MDE to refer to general model engineering ideas, without committing to strict OMG standards.ConferencesAmong the various conferences on this topic we may mention ECMDA, the European Conference on MDA and also MoDELS, former firmed as  conference series (till 2004), the Italian Forum on MDA in collaboration with the OMG. There are also several conferences and workshops (at OOPSLA, ECOOP mainly) focusing on more specific aspects of MDA like model transformation, model composition, and generation.See alsoModeling Maturity Levels Maturity levels for modeling as for Capability Maturity Model, only the still hypothetic 5th level (MML 5) allow code generation.Model-driven engineering (MDE)Model-driven integration (MDI)Model Driven OffshoreMetamodelingPlatform Independent Model (PIM)Platform Specific Model (PSM)Modeling Maturity Level (MML)Unified Modeling Language (UML)Executable UML (xtUML)Jean-Marc JézéquelMeta-Object Facility (MOF)MOF 2.0 Query/View/Transformation (QVT)ATL (ATL is an open source implementation of QVT under Eclipse)Model Transformation Languages (MTLs)Code GenerationSoftware Factories (SoFa)CodeGear Enterprise Core Objects as MDA implementationAlgebra of Systems (AoS)Web engineeringWebML, a DSL for modeling Web applicationsDomain-driven designOpenBlueLab open source MDA based Enterprise resource planning (ERP), use case diagram and class diagram to configure completely the desired portal.Compiere and open source Enterprise Resource Planning (ERP) - MDA development and deployment framework - direct execution - no code generation.openCRX and open source Customer Relationship Management (CRM) using MDA.Service-Oriented Modeling Framework (SOMF)References Further readingMDA Distilled, Principles of Model Driven Architecture, Stephen Mellor, Kendall Scott, Axel Uhl, Dirk Weise, Addison-Wesley Professional, 2004, ISBN 0-201-78891-8MDA Explained, The Model Driven Architecture: Practice and Promise, Anneke Kleppe, Jos Warmer, Wim Bast, Addison-Wesley, 2003, ISBN 0-321-19442-XThe MDA Journal: Model Driven Architecture Straight From The Masters, Meghan Kiffer, ISBN 0-929652-25-8Model Driven Architecture, Springer-Verlag, ISBN 3-540-28240-8Model Driven Architecture: Applying MDA to Enterprise Computing, David S. Frankel, John Wiley & Sons, ISBN 0-471-31920-1Model Driven Architecture With Executable UML, Chris Raistrick, Paul Francis, John Wright, Colin Carter, Ian Wilkie Cambridge University Press, ISBN 0-521-53771-1Executive Justification for MDA, Stanley J. SewallExternal linksMDA FAQ at OMG WebsiteMendix:Provider of Model Driven application platformThe official MDA Guide Version 1.0.1OMG's MDA Web site[http://www-128.ibm.com/developerworks/rational/library/3100.html An Introduction to Model Driven Architecture] at ibm.com[http://www.pathfindermda.com/MDAdemo.html Animated Introduction - MDA Explained (4 minutes)] at PathfinderMDA.comOMG's list of MDA tools and products[http://www.bptrends.com/publicationfiles/01-04%20COL%20Dom%20Spec%20Modeling%20Frankel-Cook.pdf Domain-Specific Modeling and Model Driven Architecture] by Steve Cook[http://www.pocomatic.com/docs/whitepapers/dsm Domain Specific Modeling in IoC Frameworks]Planet MDE's list of MDA tools[http://www.omg.org/mda/mda_files/Model-Driven_Architecture.pdf Model-Driven Architecture: Vision, Standards And Emerging Technologies] at omg.org[http://www.sciences.univ-nantes.fr/lina/atl/www/papers/OnTheUnificationPowerOfModels.pdf On the Unification Power of Models.]Acceleo - OpenSource MDA Code generator based on Eclipse and EMFBLU AGE(tm) - 100% Application Generator based on UML/OCL/MDA technologies[http://www.borland.com/resources/en/pdf/white_papers/delphi_unleashing_enterprise_models_with_delphi_for_dotnet.pdf ECO - Model-Driven Development framework from CodeGear (Borland) company]configX - MDA framework for creating web applicationsExecutive Justification for MDASelect Business Solutions - Select Solution for MDA based on Select Architect's UML and code synchronization capabilitiesDiscussion of Compiere, an MDA enterprise application environment, which directly executes the model (without code generation)[http://www.mdd4dres.info International School on Model-Driven Design for Distributed, Realtime, Embedded Systems (MDD4DRES)]Category:Systems engineering Category:Domain-specific programming languages Category:Unified Modeling Languageca:Model Driven Architecture de:Model Driven Architecture es:Model Driven Architecture fa:معماری مدل-محور fr:Model driven architecture gl:Model-driven architecture id:Model-driven architecture it:Model Driven Architecture nl:Model driven architecture ja:モデル駆動型アーキテクチャ pl:Model Driven Architecture ru:Model Driven Architecture vi:Model-driven architecture zh:模型驱动架构