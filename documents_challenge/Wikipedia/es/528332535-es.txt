En el paradigma de programación orientada a objetos (POO, o OOP en inglés), un objeto se define como la unidad que en tiempo de ejecución realiza las tareas de un programa. También a un nivel más básico se define como la instancia de una clase.Estos objetos interactúan unos con otros, en contraposición a la visión tradicional en la cual un programa es una colección de subrutinas (funciones o procedimientos), o simplemente una lista de instrucciones para el computador. Cada objeto es capaz de recibir mensajes, procesar datos y enviar mensajes a otros objetos de manera similar a un servicio.En el mundo de la programación orientada a objetos (POO), un objeto es el resultado de la instanciación de una clase. Una clase es el anteproyecto que ofrece la funcionalidad en ella definida, pero ésta queda implementada sólo al crear una instancia de la clase, en la forma de un objeto. Por ejemplo: dado un plano para construir sillas (una clase de nombre clase_silla), entonces una silla concreta, en la que podemos sentarnos, construida a partir de este plano, sería un objeto de clase_silla. Es posible crear (construir) múltiples objetos (sillas) utilizando la definición de la clase (plano) anterior. Los conceptos de clase y objetos son análogos a los de tipo de datos y variable, es decir, definida una clase podemos crear objetos de esa clase, igual que disponiendo de un determinado tipo de dato (por ejemplo el tipo entero), podemos definir variables de dicho tipo:int a,b;('' 'int' es un tipo de dato y 'a' y 'b' son variables de tipo entero con las que podemos operar'')Para utilizar la funcionalidad definida en una clase en particular (salvo en las clases abstractas), primeramente es necesario crear un objeto de esa clase. De la misma manera para una persona que desea sentarse, las especificaciones para construir una silla serán de poca utilidad; lo que se necesita es una silla real construida a partir de esas especificaciones. Siguiendo con la analogía anterior, también se puede decir que para hacer operaciones aritméticas, de nada sirve por sí solo el tipo entero (int); para ello necesitamos variables (o constantes) con las que operar.Definición de ObjetoEn filosofía un objeto es aquello que puede ser observado, estudiado y aprendido, en contraposición a la representación abstracta de ese objeto que se crea en la mente a través del proceso de generalización. Un objeto en POO representa alguna entidad de la vida real, es decir, alguno de los objetos que pertenecen al negocio con que estamos trabajando o al problema con el que nos estamos enfrentando, y con los que podemos interactuar. A través del estudio de ellos se adquiere el conocimiento necesario para, mediante la abstracción y la generalización, agruparlos según sus características en conjuntos, estos conjuntos determinan las clases de objetos con las que estamos trabajando. Primero existen los objetos, luego aparecen las clases en función de la solución que estemos buscando. Ésta es la forma más común de adquirir conocimiento aunque no es la única. En ocasiones cuando el observador es un experto del negocio (o del problema), el proceso puede ser a la inversa y comenzar el análisis en una base teórica abstracta, sustentada por el conocimiento previo que da lugar primeramente a clases de objetos que satisfagan las necesidades de la solución.Estos conceptos son parte de la base teórica de la idea de objeto y clase utilizados en la POO. Los objetos tienen características fundamentales que nos permiten conocerlos mediante la observación, identificación y el estudio posterior de su comportamiento; estas características son:IdentidadComportamientoEstadoEn las ramas de las ciencias de la computación más estrictamente matemáticas, el término objeto es usado en sentido puramente matemático para referirse a cualquier "cosa". Esta interpretación resulta útil para discutir sobre teorías abstractas, pero no es suficientemente concreta para servir como definición de un tipo primitivo en discusiones de ramas más específicas como en la programación, que está más cerca de cálculos reales y el procesamiento de información.IdentidadLa identidad es la propiedad que permite a un objeto diferenciarse de otros. Generalmente esta propiedad es tal, que da nombre al objeto. Tomemos por ejemplo el "verde" como un objeto concreto de una clase color; la propiedad que da identidad única a este objeto es precisamente su "color" verde. Tanto es así que para nosotros no tiene sentido usar otro nombre para el objeto que no sea el valor de la propiedad que lo identifica.En programación la identidad de los objetos sirve para comparar si dos objetos son iguales o no. No es raro encontrar que en muchos lenguajes de programación la identidad de un objeto esté determinada por la dirección de memoria de la computadora en la que se encuentra el objeto, pero este comportamiento puede ser variado redefiniendo la identidad del objeto a otra propiedad.ComportamientoEl comportamiento de un objeto está directamente relacionado con su funcionalidad y determina las operaciones que este puede realizar o a las que puede responder ante mensajes enviados por otros objetos. La funcionalidad de un objeto está determinada, primariamente, por su responsabilidad. Una de las ventajas fundamentales de la POO es la reusabilidad del código; un objeto es más fácil de reutilizarse en tanto su responsabilidad sea mejor definida y más concreta.Una tarea fundamental a la hora de diseñar una aplicación informática es definir el comportamiento que tendrán los objetos de las clases involucradas en la aplicación, asociando la funcionalidad requerida por la aplicación a las clases adecuadas.EstadoEl estado de un objeto se refiere al conjunto de los valores de sus atributos en un instante de tiempo dado. El comportamiento de un objeto puede modificar el estado de este. Cuando una operación de un objeto modifica su estado se dice que esta tiene "efecto colateral".Esto tiene especial importancia en aplicaciones que crean varios hilos de ejecución. Si un objeto es compartido por varios hilos y en el transcurso de sus operaciones estas modifican el estado del objeto, es posible que se deriven errores del hecho de que alguno de los hilos asuma que el estado del objeto no cambiará (Véase Condición de carrera).Representación en las computadorasLos objetos aunque son entidades conceptuales, dado el diseño de las computadoras, se corresponde directamente con bloques de memoria de tamaño y localización específicos. Esto ocurre porque los cálculos y el procesamiento de la información en última instancia requieren de una representación en la memoria de la computadora. En este sentido, los objetos son primitivas fundamentales necesarias para definir de forma precisa conceptos como referencias, variables y vinculación de nombres. En ciencias de la computación se utiliza cotidianamente la interpretación más concreta de objeto en lugar de las más abstractas sin que esto sea considerado un error.Es preciso hacer notar que aunque un bloque de memoria puede aparecer contiguo en un nivel de abstracción y no contiguo en otro, lo importante es que este aparece contiguo para el programa, quien lo trata como un objeto. Por este motivo, los detalles de implementación privados de un modelo de objetos, no deben ser expuestos al cliente del objeto, y estos pueden ser cambiados sin que se requieran cambios al código cliente.Los objetos en la computadora existen entonces, sólo dentro de contextos capaces de reconocerlos; un espacio de memoria sólo contiene un objeto si un programa lo trata como tal (por ejemplo, reservándolo para uso exclusivo de un procedimiento específico y/o asociándole un tipo de dato). Así, el tiempo de vida de un objeto es el tiempo durante el cual este es tratado como un objeto. Es por esto que los objetos son entidades conceptuales, a pesar de su presencia física en la memoria de la computadora.En otras palabras, los conceptos abstractos que no ocupen espacio de memoria en tiempo de ejecución, no son, de acuerdo con esta definición, objetos. Ejemplos de estos conceptos son: patrones de diseño exhibidos por un conjunto de clases y tipos de datos en lenguajes de programación que utilizan tipos estáticos.Se llama objeto fantasma a un objeto que no es referenciado en un programa, y que por tanto no sirve a ningún propósito. En un lenguaje que posea un recolector de basura, este marcará la memoria ocupada por el objeto como libre, aunque ésta todavía contendrá los datos del objeto hasta el momento que sea reescrita.Objetos en la programación orientada a objetosEn programación orientada a objetos (POO), una instancia de programa (por ejemplo un programa ejecutándose en una computadora) es tratado como un conjunto dinámico de objetos interactuando entre sí. Los objetos en la POO extienden la noción más general descrita en secciones anteriores para modelar un tipo muy específico que está definido fundamentalmente por:atributos que representan los datos asociados al objeto, o lo que es lo mismo sus propiedades o características. Los atributos y sus valores en un momento dado, determinan el estado de un objeto.métodos que acceden a los atributos de una manera predefinida e implementan el comportamiento del objeto.Los atributos y métodos de un objetos están definidos por su clase, aunque (en un lenguaje dinámico como Python o Ruby) una instancia puede poseer atributos que no fueron definidos en su clase. Algo similar ocurre con los métodos, una instancia puede contener métodos que no estén definidos en su clase de la misma manera una clase puede declarar ciertos métodos como "métodos de clase", y estos (en dependencia del lenguaje) podrán estar o no presentes en la instancia.En el caso de la mayoría de los objetos, los atributos solo pueden ser accedidos a través de los métodos, de esta manera es más fácil garantizar que los datos permanecerán siempre en un estado bien definido (Invariante de Clase).En un lenguaje en el que cada objeto es creado a partir de una clase, un objeto es llamado una instancia de esa clase. Cada objeto pertenece a un tipo y dos objetos que pertenezcan a la misma clase tendrán el mismo tipo de dato. Crear una instancia de una clase es entonces referido como instanciar la clase.En casi todos los lenguajes de programación orientados a objeto, el operador "punto" (.) es usado para referirse o "llamar" a un método particular de un objeto. Un ejemplo de lenguaje que no siempre usa este operador el C++ ya que para referirse a los métodos de un objeto a través de un puntero al objeto se utiliza el operador (-).Consideremos como ejemplo una clase aritmética llamada Aritmética. Esta clase contiene métodos como "sumar", "restar", "multiplicar", "dividir", etc. que calculan el resultado de realizar estas operaciones sobre dos números.Un objeto de esta clase puede ser utilizado para calcular el producto de dos números, pero primeramente sería necesario definir dicha clase y crear un objeto. En las secciones a continuación se muestra como hacer esto utilizando dos lenguajes de programación: C++ y Python.Declaración de una claseEsta clase podría ser definida de la siguiente manera en C++:   &lt;source lang = &quot;cpp&quot;&gt;class Aritmetica        inline int restar (int a, int b) const
              inline float multiplicar (int a, int b) const
              inline float dividir (int a, int b) const
       ;   &lt;/source&gt;o como sigue en Python:   &lt;source lang = &quot;python&quot;&gt;class Aritmetica:   def sumar(self, a, b):
       return a + b   def restar(self, a, b):
       return a - b   def multiplicar(self, a, b):
       return a * b   def dividir(self, a, b):
       return a / b
   &lt;/source&gt;Instanciación de una clase en un objetoPara crear un objeto de tipo 'Aritmetica' (instanciar a Aritmetica) en C++ se haría de la siguiente forma: Aritmetica calculador = Aritmetica();Otra manera usando punterosAritmetica* calculador1 = new Aritmetica(); la misma operación usando python sería así: calculador = Aritmetica() Operando con un objetoUna vez que tenemos un objeto de 'Aritmetica', podemos usarlo para realizar cálculos sobre dos números. En C++ contamos con dos objetos de ejemplo: "calculador" y "calculador1", en esta última variable en realidad hemos almacenado la dirección de memoria del objeto creado. En este lenguaje esto sienta diferencias a la hora de utilizar el objeto.Para calcular la suma entre 78 y 69 usando un objeto "calculador" necesitaríamos un código como el siguiente en C++: int resultado = 0; resultado = calculador.sumar(78, 69);Otra manera usando punterosresultado = calculador1-sumar(78, 69); ahora usando Python para sumar dos números con el objeto calculador: resultado = calculador.sumar(78, 69) Otro ejemplo del mundo real de un objeto podría ser "mi perro", el cual es una instancia de un tipo (una clase) llamada "perro", la que es una subclase de la clase "animal". En el caso de un objeto polimórfico, algunos detalles de su tipo pueden ser ignorados, por ejemplo el objeto "mi perro" puede ser usado en un método que espera recibir un "animal". También podría usarse un objeto "gato", puesto que esta también pertenece a la clase "animal". Pero mientras es accedido como un "animal", algunos atributos de un "perro" o un "gato" permanecerán no disponibles, como la "cola", porque no todos los animales tienen colas.Atributos dinámicos en objetosPython y C++ son lenguajes con características muy diferentes. Python utiliza un sistema de tipos dinámico y C++ en cambio, uno estático o estricto. El sistema de tipos usado en Python permite al programador agregar atributos a una instancia que no han sido definidos en la clase que le dio origen, cosa que no es posible hacer en un lenguaje como C++, por ejemplo:La clase siguiente en Python no define ningún atributo: class Prueba(object):   passpero es posible hacer lo siguiente: 1: p = Prueba() 2: p.unNumero = 3 3: print("Atributo unNumero de p = %s" % p.unNumero) 4: Atributo unNumero de p = 3 A la instancia de p''' creada en la línea 1, le es asignado en la línea 2 el valor "3", lo cual crea un atributo de nombre unNumero en '''p de tipo "int" para almacenar el número 3.Relaciones entre objetosComo ya se ha dicho antes, un sistema orientado a objetos está caracterizado por objetos que interactúan entre si. Estas interacciones supone ciertos tipos de relaciones entre los objetos del sistema. La semántica que expresa un objeto en el sistema está determinado en primer lugar, por las relaciones que éste establece con otros objetos o conjunto de objetos. Tomemos como ejemplo un objeto fecha, del que sin establecer ningún tipo de relación, podría decirse que significa un día del año particular. Pero si relacionamos ese objeto fecha con un objeto Persona de manera que represente la fecha en que esa persona nació, en ese contexto dado, el mismo objeto fecha adoptaría un significado diferente, el de un cumpleaños, aunque sigue siendo una fecha, ahora tiene otra idea asociada. Las relaciones entre objetos no solo están definidas por los objetos que participan y la circunstancia que los relaciona, sino también por la cantidad de objetos (cardinalidad de la relación) y la dirección de la misma. Una relación puede tener cardinalidad:uno a uno, ejemplo: un auto tiene un motoruno a muchos, ejemplo: un auto tiene muchas ruedasmuchos a muchos, ejemplo: un auto se puede servir en muchas gasolineras y una gasolinera puede servir a muchos autos.y direccionalidad:unidireccional, ejemplo: un auto tiene cuatro ruedas.bidireccionalLas relaciones entre objetos más generales son las siguientes:ComposiciónLa composición (también conocida como relación asociativa) es un tipo de relación que se establece entre dos objetos que tienen comunicación persistente. Se utiliza para expresar que un par de objetos tienen una relación de dependencia para llevar a cabo su función, de modo que uno de los objetos involucrados está compuesto por el otro.De manera práctica, es posible reconocer asociatividad entre dos objetos A y B si la proposición "A tiene un B" (o viceversa) es verdadera. Por ejemplo: "una computador tiene un disco duro" es verdadero, por tanto un objeto computador tiene una relación de composición con al menos un objeto disco duro.UsoUn objeto usa (conoce) a otro cuando puede enviarle mensajes, por ejemplo, para requerir de este algún servicio. La composición puede verse como un caso particular de esta relación.DelegaciónEn ocasiones para lograr flexibilidad de diseño, un objeto es implementado de forma tal que este delegue parte de su funcionalidad en otro objeto. Esto es muy común en aplicaciones que hacen uso de interfaces gráficas de usuario, en las que los controles gráficos generales delegan la acción que se ejecutará ante determinado estímulo en otro objeto.Objetos especializadosAlgunos términos para tipos especializados de objetos son:Singleton: Un objeto del que solo puede existir una única instancia de su clase durante el tiempo de vida del programa.Functor : un objeto que puede ser utilizado como una función.Objeto inmutable: un objeto creado con un estado fijo y que no puede variar en el tiempo de vida del mismo.Objeto de primera clase: un objeto que puede ser utilizado sin restricciones.Contenedor: un objeto que contiene a otros objetos.Fábrica de objetos: un objeto cuyo propósito es crear otros objetos.Metaobjeto: un objeto a partir del cual se pueden crear otros objetos (comparable con una clase, la que no necesariamente es un objeto)Prototipo: un metaobjeto especializado a partir del cual se pueden crear otros objetos copiándolo.Objeto todopoderoso: un objeto que sabe mucho o hace mucho. Este es un ejemplo de antipatrón de diseño.Antiobjeto: una metáfora computacional útil para conceptualizar y solucionar problemas complejos, usualmente con aproximaciones paralelas.Véase tambiénPatrón de diseñoEnlaces externosCategoría:Programación orientada a objetosbe-x-old:Аб'ект (праграмаваньне) bs:Računarski objekat cs:Instance třídy da:Objekt (datalogi) de:Objekt (Programmierung) en:Object (computer science) eo:Objekto (komputiko) fi:Olio (ohjelmointi) fr:Objet (informatique) ga:Oibiacht (ríomhaireacht) it:Oggetto (informatica) ja:オブジェクト (プログラミング) ko:객체 (전산학) lt:Objektas (programavimas) nl:Object (informatica) pl:Obiekt (programowanie obiektowe) pt:Objeto ru:Объект (программирование) simple:Object (computer science) ta:பொருள் (கணினியியல்) uk:Об'єкт (програмування) vi:Đối tượng (khoa học máy tính) zh:对象 (计算机科学)