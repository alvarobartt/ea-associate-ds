  Lua est un langage de script libre, réflexif, impératif et fonctionnel. Créé en 1993, il est conçu de manière à pouvoir être embarqué au sein d'autres applications afin d'étendre celles-ci, comme en témoigne la compacité de son interpréteur (95 à 185 Ko pour la version 5.0.2, selon le compilateur utilisé et le système cible). Lua (qui signifie lune en portugais) a été développé par Luiz Henrique de Figueiredo, Roberto Ierusalimschy et Waldemar Celes, membres du groupe de recherche TeCGraf, de l'université de Rio de Janeiro au Brésil.Lua est écrit en langage C ANSI strict, et de ce fait est compilable sur une grande variété de systèmes. Il est souvent utilisé dans des systèmes embarqués où sa compacité est très appréciée. Il profite de la compatibilité que possède le C avec un grand nombre de langages pour s'intégrer facilement dans la plupart des projets.Il est particulièrement apprécié pour le développement de jeux vidéo comme pour l'interface du célèbre jeu World of Warcraft de Blizzard Entertainment ou encore Far Cry de Crytek Studios, SimCity 4 et prochainement dans Natural Selection 2 de Unknown Worlds Entertainment qui a entre autres développé Decoda, un IDE pour Lua. Lua a été porté dernièrement sur la console portable de Sony, la PSP. Une version Playstation 2 est en cours de portage. Ce langage est également utilisé pour la programmation de jeux de Nintendo DS.GénéralitésCommentairesEn Lua, les commentaires débutent par -- et finissent à la fin de la ligne. Si la première ligne commence par #! (shebang) elle est aussi traitée comme un commentaire. On peut faire des commentaires multilignes avec la syntaxe -- ...VariablesLes variables peuvent contenir nil (la valeur nulle, vide), un booléen, une chaîne de caractères, un nombre, une table ou une fonction. Il existe aussi d'autres types comme userdata ou thread moins souvent rencontrés. Le type userdata est très pratique, il correspond à un objet C/C++ défini par l'utilisateur&nbsp;: il est donc possible de créer une structure C ou une classe C++, et d'utiliser des objets de ce type dans un script Lua, après avoir attaché à cet objet une métatable qui se charge d'appeler les fonctions de la classe C++. On peut donc imaginer de créer les classes métier de base d'un programme en C, et coder l'application elle-même en Lua, ce qui accélère considérablement son développement (pas de recompilation en cas d'erreur de programmation...).Par défaut, lorsqu'on déclare une variable, elle est globale à tout l'environnement d'exécution, sauf si elle est précédée du mot-clef local.Les chaînes de caractères sont délimitées par des guillemets simples (') ou doubles("), voire la marque de chaîne litérale  ... (multiligne, pas de caractère spécial). L'opérateur de concaténation de chaînes se représente par deux points (..).Les fonctionsLes fonctions sont considérées comme des variables. Cela apporte une grande flexibilité : il est par exemple possible de créer des fonctions locales à une autre fonction, de passer une fonction comme paramètre d'une autre fonction (ou comme valeur de retour) ou de mettre des fonctions dans des tables. Si on affecte nil à une fonction (eg. print = nil), la fonction n'existe plus, n'est plus appelable.Un avantage des fonctions en Lua est qu'elles peuvent prendre un nombre indéfini de paramètres mais surtout elles peuvent retourner plusieurs valeurs.Les tables, métatablesLes tables sont une structure Lua qui permettent de stocker des variables indexées par une clef (comme en PHP par exemple). Les tables servent à beaucoup de choses en Lua, c'est par exemple la structure utilisée pour représenter des pseudo-classes et objets.Les métatables sont des tables pour lesquelles on a associé une fonction à chaque opérateur de base (+, -, (), [], ...). Ce mécanisme est très proche de la redéfinition des opérateurs en C++. Par exemple, si la variable x contient une table associée à une métatable appropriée, l'appel de fonction x(arguments) sera valide car Lua cherchera alors dans la métatable comment traiter cet appel.C'est ainsi qu'on peut implémenter l'héritage entre tables. Si un champ n'est pas trouvé lorsqu'il est demandé, Lua cherchera dans la métatable quelle table est parente et demandera à la table parente de fournir l'élément approprié.ExemplesCondition if condition1 then-- instructions executées si la condition 1 est vraieelseif condition2 then-- instructions executées si la condition 2 est vraie et la condition 1 est fausseelse-- instructions executées si les deux conditions sont faussesend Boucles repeat-- codeuntil condition  et  while condition do-- codeend  ainsi que  for var = start, end, step do-- codeend  ou  for var_1, ..., var_n in explist do-- codeend Déclaration de fonctions function mafonction(arg1, arg2, ...)-- code
return résultat1, résultat2end ou -- mafonction = function (arg1, arg2, ...)-- code
return résultat1, résultat2end Appels de fonction res1, res2 = mafonction(var) Blocs inconditionnelsLes blocs inconditionnels servent par exemple à déclarer des variables locales à ce bloc&nbsp;:  dolocal mavariable = &quot;chaîne&quot; -- déclaration de variable, optionnel
-- code utilisant mavariableend Déclaration de tableTable à indices numériques croissant (premier indice&nbsp;: 1) a =   Table à indices textuels -- les clés ayant la syntaxe d'une variable n'ont pas besoin d'être entre quotes a =   Table stockant des variables complexes&nbsp;: autres tables, fonctions, références croisées...  fonction = function (a, b) return (a + b) / a * b end t = \.)\d, [ C:\Lua\Lua.exe ] = true, , -- Stockage d'une fonction f = function () return math.random(100) end, ff = fonction, -- Table comme clé [  ] = , Référence dans la tablet.reference = t.a t[  ] = t.f Hello World (sur PSP) red = Color.new(255, 0, 0) --declaration de la couleur rougewhile true do --commencement de la boucle screen:clear()--on efface l'ecran screen.flip()--on actualise l'ecranscreen:print(00,10,"Hello World",red)--on affiche le texte "Hello World" en position  screen.waitVblankStart()--on attend l'instruction suivante (dans ce cas la on laisse afficher le texte indefiniment)screen.flip()--on actualise l'ecran end --fin de la boucle == Voir aussi == Le Lua a été récemment embarqué dans la Sony Playstation Portable, grâce au programme Lua Player qui permet de lire des applications écrite avec le Lua afin d'étendre les capacités de la console. (voir liens externes)Article connexePluaLiens externes Site officiel de Lua Site des utilisateurs de Lua Decoda, un puissant IDE pour Lua LuaForge, un service d'hébergement pour les projets en rapport avec Lua Site officiel de Lua Player, logiciel permettant de lire des applications Lua sur la Playstation Portable Tutoriel Lua sur le site de developpez.comCatégorie:Langage de scriptar:لوا (لغة برمجة) cs:Lua da:Lua (programmeringssprog) de:Lua en:Lua (programming language) eo:Lua es:Lua eu:Lua fi:Lua gl:Lua (linguaxe de programación) it:Lua ja:Lua ko:루아 (프로그래밍 언어) ms:Lua nl:Lua (programmeertaal) pl:Lua pt:Lua (linguagem de programação) ru:Lua sv:Lua uk:Lua vi:Lua zh:Lua