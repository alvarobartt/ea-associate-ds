UML (en anglais Unified Modeling Language, « langage de modélisation unifié ») est un langage graphique de modélisation des données et des traitements. C'est une formalisation très aboutie et non-propriétaire de la modélisation objet utilisée en génie logiciel.UML est l'accomplissement de la fusion des précédents langages de modélisation objet Booch, OMT, OOSE. Principalement issu des travaux de Grady Booch, James Rumbaugh et Ivar Jacobson, UML est à présent un standard défini par l'Object Management Group (OMG).L'OMG diffuse depuis novembre 2007 la version UML 2.1.2, et travaille à présent sur la version 2.2.Le formalisme d'UMLUML 2 propose 13 types de diagrammes (9 en UML 1.3). UML n'étant pas une méthode, leur utilisation est laissée à l'appréciation de chacun, même si le diagramme de classes est généralement considéré comme l'élément central d'UML ; des méthodologies, telles que l'UnifiedProcess, axent elles l'analyse en tout premier lieu sur les diagrammes de cas d'utilisation (Use Case). De même, on peut se contenter de modéliser seulement partiellement un système, par exemple certaines parties critiques.UML se décompose en plusieurs sous-ensemblesLes vues : Les vues sont les observables du système. Elles décrivent le système d'un point de vue donné, qui peut être organisationnel, dynamique, temporel, architectural, géographique, logique, etc. En combinant toutes ces vues il est possible de définir (ou retrouver) le système complet.Les diagrammes : Les diagrammes sont des éléments graphiques. Ceux-ci décrivent le contenu des vues, qui sont des notions abstraites. Les diagrammes peuvent faire partie de plusieurs vues.Les modèles d'élément : Les modèles d'élément sont les briques des diagrammes UML, ces modèles sont utilisés dans plusieurs types de diagramme. Exemple d'élément : cas d'utilisation (CU ou cadut'), classe, association, etc.Mise en œuvre d'une démarche à l'aide d'UML : les vuesUne façon de mettre en œuvre UML est de considérer différentes vues qui peuvent se superposer pour collaborer à la définition du système.Vue des cas d'utilisation : c'est la description du modèle "vue" par les acteurs du système. Elle correspond aux besoins attendus par chaque acteur (c'est le QUOI et le QUI).Vue logique : c'est la définition du système vu de l'intérieur. Elle explique comment peuvent être satisfaits les besoins des acteurs (c'est le COMMENT).Vue d'implémentation : cette vue définit les dépendances entre les modules.Vue des processus : c'est la vue temporelle et technique, qui met en œuvre les notions de tâches concurrentes, stimuli, contrôle, synchronisation, etc.Vue de déploiement : cette vue décrit la position géographique et l'architecture physique de chaque élément du système (c'est le OÙ).Nota : le POURQUOI, n'est pas défini dans UML.Les diagrammesLes 13 diagrammes UML sont dépendants hiérarchiquement et se complètentDiagrammes Structurels ou Diagrammes statiques (cf. Structure Diagram)Diagramme de classes (cf. Class diagram) : il représente les classes intervenant dans le système.Diagramme d'objets (cf. Object diagram) : il sert à représenter les instances de classes (objets) utilisées dans le système.Diagramme de composants (cf. Component diagram) : il permet de montrer les composants du système d'un point de vue physique, tels qu'ils sont mis en œuvre (fichiers, bibliothèques, bases de données...)Diagramme de déploiement (cf. Deployment diagram) : il sert à représenter les éléments matériels (ordinateurs, périphériques, réseaux, systèmes de stockage...) et la manière dont les composants du système sont répartis sur ces éléments matériels et interagissent avec eux.Diagramme des paquetages (cf. Package Diagram) : un paquetage étant un conteneur logique permettant de regrouper et d'organiser les éléments dans le modèle UML, le Diagramme de paquetage sert à représenter les dépendances entre paquetages, c’est-à-dire les dépendances entre ensembles de définitions.Diagramme de structure composite (depuis UML 2.x, cf. Composite Structure Diagram) : permet de décrire sous forme de boîte blanche les relations entre composants d'une classe.Diagrammes Comportementaux (cf. Behavior Diagram)Diagramme des cas d'utilisation (use-cases) (cf. Use Case Diagram) : il permet d'identifier les possibilités d'interaction entre le système et les acteurs (intervenants extérieurs au système), c'est-à-dire toutes les fonctionnalités que doit fournir le système.Diagramme états-transitions (cf. State Machine Diagram) : permet de décrire sous forme de machine à états finis le comportement du système ou de ses composants.Diagramme d'activité (cf. Activity Diagram) : permet de décrire sous forme de flux ou d'enchaînement d'activités le comportement du système ou de ses composants.Diagramme d'interactions ou Diagrammes dynamiques (cf. Interaction Diagram) :Diagramme de séquence (cf. Sequence Diagram) : représentation séquentielle du déroulement des traitements et des interactions entre les éléments du système et/ou de ses acteurs.Diagramme de communication (depuis UML 2.x, cf. Communication Diagram) : représentation simplifiée d'un diagramme de séquence se concentrant sur les échanges de messages entre les objets.Diagramme global d'interaction (depuis UML 2.x, cf. Interaction Overview Diagram) : permet de décrire les enchaînements possibles entre les scénarios préalablement identifiés sous forme de diagrammes de séquences (variante du diagramme d'activité).Diagramme de temps (depuis UML 2.x, cf. Timing Diagram) : permet de décrire les variations d'une donnée au cours du temps.Les modèles d'élémentsLe Stéréotype est une marque de généralisation notée par des guillemets, cela montre que l'objet est une variété d'un modèle.Le classeur est une annotation qui permet de regrouper des unités ayant le même comportement ou structure. Un classeur se représente par un rectangle conteneur, en traits pleins.Un paquetage regroupe des diagrammes ou des unités.Chaque classe ou objet se définit précisément avec le signe "::", ainsi l'identification d'une Classe X en dehors de son package ou de son classeur sera définie par "Package A::Classeur B::Classe X".Les modèles d'éléments de type communSymbolique des modèles d'éléments :Classe (Class)Objet (Object)Cas d'utilisation (Use case)Paquetage (Package)Note (Comment)Nœud (Node)Fourche (Fork)Acteur (Actor)État (State)Activité (Activity)État initial (Initial state)État terminal (Final state)InterfaceOO et O8. Diagramme de déploiement9. Diagramme de composantLogiciels de modélisation UMLIl existe de nombreux outils logiciels de modélisation UML. Malheureusement aucun d'entre eux ne respecte strictement aucune des versions de UML, particulièrement UML2 : beaucoup de ces outils introduisent des notations particulières non conformes, très peu supportent les différents types de diagrammes définis par le standard. Beaucoup en revanche incluent des outils de génération de squelette de code, particulièrement à partir du diagramme de classes, qui est celui qui se prête le mieux à une telle automatisation.Logiciels libresAcceleo, générateur de code source à partir de modèles UML ;AndroMDA, atelier de génération de code à partir de modèles tels UML sous licence BSD ; des générateurs diverses comme J2EE ou .NET sont disponibles ;ArgoUML modeleur UML et génération de code sous licence BSD ;ATL solution open source pour faire des transformations de modèles vers ou depuis UML (entre autres); ATL est un langage de type QVT ;BOUML, un modeleur UML sous GNU GPL pour Windows, Linux, MacOS X et Solaris ;Delphia Object Modeler (version personnelle), Outil de modélisation et de prototypage. Diagrammes de classe et d'état. Langage objet intégré. Générateur de Java ;Dia, logiciel de diagrammes pour GNOME ;Eclipse GMT-UMLX ;Eclipse UML2, méta modèle UML2, sans interface graphique ;Gaphor un modeleur UML sous GNU GPL ;Netbeans http://www.netbeans.org, de Sun ;Neptune outil permettant de vérifier les modèles UML1.x via des règles OCL ;Papyrus un modeleur UML2 open source pour la plateforme Eclipse sous licence EPL ;PauWare moteur d'exécution Java des State Machine Diagrams et Sequence Diagrams d'UML 2 ;Umbrello UML Modeller modeleur UML sous GNU GPL pour KDE.Staruml, ne fonctionne que sur Windows ;TOPCASED atelier en cours de développement basé sur la plate-forme Eclipse qui propose un éditeur UML2.Violet UML modeleur UML, autonome ou plugin pour Eclipse.Open States Machines Designer Editeur graphique de diagrammes à états transitions.Logiciels propriétairesTibco business studio, un logiciel gratuit de modelisation de processBLU AGE, un atelier MDA permettant une transformation 100% automatisée de vos diagrammes UML 2.X en applications Java EE et .Net ;Enterprise Architect, un outil de modélisation UML ;Jude http://jude.change-vision.com/jude-web/index.html, en Java ;MagicDraw, un éditeur de diagrammes UML ;Objecteering d'Objecteering Software ;Omondo EclipseUML, un plugin UML pour Eclipse;Poseidon (version commerciale), basé sur ArgoUml (logiciel libre);PowerAMC/PowerDesigner http://www.sybase.com/products/developmentintegration/powerdesigner, de Sybase (un outil de modélisation complet intégrant l'UML en plus des classiques MCD, MPD ...) ;Rhapsody de Telelogic pour une modélisation PSM (Platform Specific Model) complète de systèmes ou de logiciels embarqués ;Rational Software Architect / Rational Software Modeler (et toujours Rose/XDE), de IBM Software Rational ;SDE for Eclipse, un plugin UML pour Eclipse ;Telelogic TAU de Telelogic pour la modélisation PIM (Platform Independant Model) de systèmes ou de logiciels, pour la modélisation d'architectures SOA ou l'implémentation d'applications pour architecture SOA ;Together, de Borland ;Visual Paradigm for UML, de Visual Paradigm Internation Ltd. ;Delphia Object Modeler (version commerciale), Outil de modélisation et de prototypage. Diagrammes de classe et d'état. Langage objet intégré. Générateur de Java ;Voir également le pendant de cette section (plus complet) dans une page dédiée sur Wikipedia en anglais.Voir aussiLiens internesUnified ProcessQVTIngénierie dirigée par les modèles,  MDEMDALangage dédié,  DSL MTLATLOCL,  OCLTransformation Transformation de modèlesAcceleoMERISE, Diagramme de GanttUrbanisme (système d'information)Modèle (informatique)Modeling and Analysis of Real Time and Embedded systemsWebMLLiens externes  UML.org OMG (Object Management Group) UML Jokes UML 2.1.2Cours d'UML 2.0 en français par Laurent AudibertTutoriel UML en français par Laurent PiechockiTutoriel UML 2.0 - Diagramme de classes et d'architectureIntroduction à UML en françaisLa F.A.Q UML Les réponses à vos questions sur UML & UML 2.0BibliographieGrady Booch, James Rumbaugh, Ivar Jacobson (2000). Le guide de l'utilisateur UML, ISBN 2-212-09103-6UML 2 et MDE, Ingénierie des modèles avec études de cas (Franck Barbier) ISBN 978-2-10-049526-9 Études de cas téléchargeables''UML 2 et les Design Patterns - Craig Larman (3 édition), ISBN 2-7440-7090-4Martin Fowler et al. (2004). UML 2.0, ISBN 2-7440-1713-2 : initiation aux aspects essentiels de la notationUML 2 - Modéliser une application Web - Pascal Roques, Eyrolles 2007, ISBN 2-212-12136-9UML 2 par la pratique - Études de cas et exercices corrigés - Pascal Roques, Eyrolles 2006, ISBN 2-212-12014-1Catégorie:Unified Modeling Languageaf:Unified Modeling Language ar:اللغة الموحدة للنمذجة bg:UML bs:UML ca:Llenguatge unificat de modelat cs:Unified Modeling Language da:UML de:Unified Modeling Language el:Γλώσσες μοντελοποίησης λογισμικού en:Unified Modeling Language eo:UML es:Lenguaje Unificado de Modelado eu:Unified Modeling Language fi:UML-mallinnus gl:Linguaxe Unificada de Modelado he:Unified Modeling Language hu:Unified Modeling Language id:UML it:Unified Modeling Language ja:統一モデリング言語 lt:Unified Modeling Language mk:Unified Modeling Language ms:UML nl:Unified Modeling Language no:Unified Modeling Language pl:UML pt:UML ro:UML ru:UML sk:Unified Modeling Language sl:Poenoteni jezik modeliranja sr:УМЛ sv:Unified Modeling Language th:ยูเอ็มแอล tr:UML uk:UML vi:Ngôn ngữ mô hình hóa thống nhất zh:统一建模语言