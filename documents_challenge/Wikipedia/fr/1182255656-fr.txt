 Erlang, (d'après le nom du mathématicien Agner Erlang, mais aussi contraction d'Ericsson Language), est un langage fonctionnel concurrent, temps réel et distribué basé sur le modèle d'acteur. Il possède des fonctionnalités de tolérance aux pannes et de mise à jour du code à chaud permettant le développement d'applications à haute disponibilité.Il a été crée par Ericsson qui l'utilise dans plusieurs de ses produits comme le commutateur ATM AXD 301. Depuis sa publication sous licence Open Source en 1998, Erlang est utilisé par d'autres entreprises qui développent des logiciels liés aux réseaux de télécommunications comme T-Mobile et Nortel. Il est aussi utilisé pour écrire le serveur Jabber ejabberd, le serveur HTTP Yaws ainsi que le logiciel de modélisation 3D Wings 3D. Il possède de nombreuses bibliothèques incluses dans la distribution de base et regroupées sous le nom de OTP (Open Telecom Platform), et peut s'interfacer avec d'autres langages comme Java ou C++.ExemplesEn Erlang, la fonction factorielle s'écrit sous sa forme récursive comme suit :'''-module'''(fact).
'''-export'''([fac/1]).fac(0) -&gt; 1;
fac(N) '''when''' N &gt; 0 -&gt; N * fac(N-1).L'algorithme de tri Quicksort avec une implémentation également récursive s'écrit sous cette forme en Erlang :''%% quicksort:qsort(List)''
''%% Trie une liste d'éléments''
'''-module'''(quicksort).
'''-export'''([qsort/1]).qsort([]) -&gt; [];
qsort([Pivot|Reste]) -&gt;
    qsort([ X || X &lt;- Reste, X &lt; Pivot]) ++ [Pivot] ++ qsort([ Y || Y &lt;- Reste, Y &gt;= Pivot]).Le code fait des appels récursifs à la fonction qsort jusqu'à ce que l'ensemble soit trié. L'expression [ X || X  peut se traduire par « Choisir l'ensemble des X tels que X est un membre de Reste et X est inférieur à Pivot ». L'opérateur ++ est celui de la concaténation entre les listes.Points fortsLe partage de données par passage de messageContrairement aux fils d'exécution dans des langages classiques tels Java ou C, les processus Erlang ne partagent pas de mémoire pour communiquer ce qui permet d'éviter les problèmes liés à la synchronisation. La transmission d'informations se fait uniquement par passage de messages. La primitive qui permet l'envoi d'un message est send, exprimée par !.La syntaxe est la suivante :Pid ! Messagedans lequel Pid est l'identité du processus destinataire et Message une expression quelconque.À la différence d'autres langages concurrents comme Ada, l'envoi et la réception d'un message sont asynchrones en Erlang. Du point de vue de l'émetteur, l'envoi est instantané quel que soit l'état du destinataire. Le message est simplement remis dans la boîte aux lettres de ce dernier qui pourra le consommer au moment voulu. Cette propriété permet de découpler temporellement l'émetteur du receveur et ainsi de maximiser le niveau de concurrence dans le système tout en restant tolérant à la latence introduite par la communication dans un système distribué.Gestion explicite du tempsDu fait de ses origines comme outil logiciel de télécommunications, Erlang permet la définition de contraintes de temps réel souple (soft real time), c'est à dire l'exécution d'une action à l'intérieur d'un temps déterminé. Erlang incorpore la gestion du temps dans la primitive de réception de message receive, dont la syntaxe est la suivante:receive
    Message1 -&gt;
       Action1;
    Message2 -&gt;
       Action2
after
    Timeout -&gt;
       ActionTimeOut
endLe processus qui exécute le code ci-dessus attendra au plus, la valeur de l'expression Timeout. Si aucun message correspondant à Message1 ou Message2 n'est reçu par le processus d'ici là, il exécute alors l'action ActionTimeOut.La programmation distribuée à base de nœud et de processusLes processus Erlang s'exécutent dans une machine virtuelle. Plusieurs machines virtuelles possiblement situées sur différents ordinateurs peuvent être connectées entre elles et former les nœuds d'un système distribué. La communication entre processus localisés sur des nœuds différents utilise les mêmes primitives et possède la même sémantique que pour la communication entre processus du même nœud. Du point de vue du programmeur, la localisation d'un processus est transparente.Les connexions entre nœuds sont dynamiques. Un nœud peut joindre et quitter le système (ou en être isolé par une panne) à n'importe quel moment. Cette caractéristique autorise la tolérance aux pannes par redondance et la montée en charge d'une application par ajout de nouveaux nœuds.La richesse de l'environnementBâties sur le langage, les bibliothèques Open Telecom Platform (OTP) offrent des fonctionnalités de distribution des traitements et de supervision des nœuds très avancées, ainsi qu'une base de données répartie. L'accent est très clairement mis sur la tolérance aux pannes puisque le couple Erlang/OTP permet entre autres de :mettre à jour le code d'un programme sans arrêter celui-cidésigner des processus superviseurs qui suivront des instructions bien précises en cas d'arrêt des processus supervisés (redémarrage immédiat ou retardé, décompte du nombre d'erreurs avant de ne plus essayer de redémarrer le processus fautif, etc.)mettre en place une hiérarchie de supervision redondante et centralisée de telle sorte que l'application soit entièrement supervisée tout en répartissant la logique de supervision à chaque niveau.Les points faiblesUne documentation bien structurée mais peu abondante, de par le relatif manque de popularité du langageLe traitement de données textuelles assez peu performantLiens externesPage principale d'Erlang : implémentation Open SourceConcurrent programming in Erlang, la bible du langage, en anglais.Page d'Erlang chez Ericsson : licence et support EricssonErlang Projects : un portail collaboratif dédié à ErlangDocuments en français sur ErlangSite en français sur Erlang (Assez ancien)Catégorie:Langage de programmation Catégorie:Langage fonctionnel Catégorie:Programmation concurrenteca:Erlang cs:Erlang (programovací jazyk) da:Erlang (programmeringssprog) de:Erlang (Programmiersprache) en:Erlang (programming language) es:Erlang gl:Erlang it:Erlang (linguaggio) ja:Erlang ko:얼랑 (프로그래밍 언어) nl:Erlang (programmeertaal) pl:Erlang (język programowania) ru:Erlang sv:Erlang (programspråk) th:ภาษาเออร์แลง uk:Erlang zh:Erlang