 La forme de Backus-Naur (souvent abrégée en BNF, de l'anglais Backus-Naur Form) est une notation permettant de décrire les règles syntaxiques des langages de programmation. C’est donc un métalangage. Elle est utilisée dans certains livres pour décrire le langage étudié, mais également par de nombreux logiciels d’analyse syntaxique pour travailler sur des fichiers sources de plusieurs langages différents. Elle est une notation pour des grammaires formelles de type hors-contexte (car on définit les termes hors de leur contexte, pour replacer ensuite la définition desdits termes dans ce contexte).Cette syntaxe a été conçue par John Backus et Peter Naur lors de la création de la grammaire du langage Algol 60. Initialement appelée Backus normal form (« forme normale de Backus »), elle est devenue la « forme de Backus-Naur » à la suggestion de Donald Knuth.BNF et apprentissageBien que la prise de connaissance d’un langage demande une connaissance des rudiments de sa syntaxe, la BNF n'est pas adaptée à l'enseignement. La raison en est que la BNF a pour rôle de fixer des règles à des compilateurs et non à des utilisateurs humains. L'apprentissage initial d'un langage n'a pas besoin du degré de précision de la BNF, qui peut même y constituer un handicap.Des expériences tentées vers 1967-1972 dans les Écoles des Mines, par exemple, se sont toutes soldées par des échecs. Néanmoins, certains enseignements de ce métalangage constituent une réussite. Un exemple vivant : le BNF continue d'être enseigné dans certaines écoles, notamment à l'Université de Liège par Pierre-Arnoul de Marneffe, dans le cadre de la formation générale des ingénieurs civils et des étudiants informaticiens.En revanche, cette forme de description convient très bien comme aide à l’écriture de compilateurs.SyntaxeEn BNF, on distingue les méta-symboles, les terminaux et les non terminaux. Les méta-symboles sont tout simplement les symboles de BNF. Les symboles non terminaux sont les noms des catégories que l’on définit, tandis que les terminaux sont des symboles du langage décrit.Prenons un exemple définissant la structure if du langage C : &lt;structure_if&gt; ::= if &quot;(&quot; &lt;condition&gt; &quot;)&quot; &quot;&quot;,  et &lt;code&gt; sont des non terminaux. ::= est un méta-symbole signifiant « est défini par ». if, "(", ")", "" sont des terminaux. Lorsque les terminaux ne font qu’un caractère, qu’ils contiennent des caractères non alphanumériques ou qu’ils peuvent être confondus avec des méta-symboles, on les met entre guillemets.Il arrive souvent qu’un non terminal puisse se définir de plusieurs façons. Dans ce cas, on utilise le méta-symbole |. &lt;categorie&gt; ::= &lt;un&gt; | &lt;deux&gt; | ...On utilise parfois également des parenthèses : &lt;categorie&gt; ::= ( &lt;un&gt; | &lt;deux&gt; ) &lt;trois&gt;qui équivaut à :&lt;categorie&gt; ::= &lt;un&gt; &lt;trois&gt; | &lt;deux&gt; &lt;trois&gt;ExtensionsDifférentes extensions (voir en particulier l'Extended Backus-Naur Form) ont été proposées afin de faciliter la rédaction et la lecture d’un document BNF.Les crochets (et &lt;tt&gt;) entourent les éléments optionnels :&lt;structure_if&gt; ::= if &quot;(&quot; &lt;condition&gt; &quot;)&quot; &quot;&quot; [ else &quot;&quot; ]Les accolades () entourent les éléments à répéter un nombre indéfini de fois, ou ils sont suivis d'une astérisque (*).Un élément qui apparaît une ou plusieurs fois est suivi d'un signe plus (+)Avec cela, nous allons tenter une meilleure définition de if … else :&lt;ifelse&gt; ::= &lt;if&gt;
[  ]
             [ else
               ( &lt;instruction&gt; &quot;;&quot; |
                 &quot; &quot;&quot; ) ]&lt;if&gt; ::= if &quot;(&quot; &lt;condition&gt; &quot;)&quot;
            ( &lt;instruction&gt; &quot;;&quot; |
              &quot; &quot;&quot; )Évidemment, il manque à cette définition les définitions des non terminaux  et .EntorsesBNF est parfois utilisé par des logiciels de vérification syntaxique. Cependant, afin de faciliter la rédaction et la lecture de ce type de documents, de nombreux auteurs créent des BNF, non destinés à être utilisés dans un tel cadre, en réalisant quelques petites entorses, qui bien souvent sont très faciles à comprendre :Il arrive que les auteurs ne définissent pas certaines règles ou les définissent avec une phrase :&lt;caractere&gt; ::= .. n’importe quel caractère ASCII ..&lt;/tt&gt;Il est également courant, dans une liste, de n’indiquer que le premier et le dernier élément : &lt;alpha&gt; ::= 'a' .. 'z' | 'A' .. 'Z'ou &lt;alpha&gt; ::= 'a'-'z' | 'A'-'Z'Enfin, dans certains livres, pour des raisons de lisibilité, on supprime les  pour les non terminaux et on met en gras les terminaux :ifelse ::= if
             [  ]
             [ '''else'''
               ( instruction ''';''' |
                 ''' '''''' ) ]if ::= '''if''' '''(''' condition ''')'''
            ( instruction ''';''' |
              ''' '''''' )Liens externesle site du BNF Web Club propose les BNF de plusieurs langages sous forme de diagrammes syntaxiques (site en anglais).Catégorie:Langage formelca:Forma de Backus i Naur cs:Backus-Naurova forma da:BNF de:Backus-Naur-Form en:Backus–Naur Form es:Backus-Naur form fi:Backus–Naur-muoto gl:Backus-Naur Form hr:Backus-Naurov oblik hu:Backus–Naur forma is:BNF it:Backus-Naur Form ja:バッカス・ナウア記法 ka:ბეკუს-ნაურის ფორმალიზმი ko:바쿠스-나우르 표기법 nl:Backus-Naur-formalisme pl:Notacja BNF pt:Formalismo de Backus-Naur ru:Форма Бэкуса — Наура sr:Бекус-Наурова форма sv:Backus-Naur-form ta:பேக்கசு-நார் முறை tr:Backus-Naur form uk:Нотація Бекуса-Наура zh:巴科斯范式