Un logiciel multiplate-forme ou multiplateformeEn français, le préfixe « multi » doit être attaché au radical ; le mot devrait donc être « multiplate-forme » ; cependant, les rectifications de l’orthographe proposées par le Conseil supérieur de la langue française dans son rapport de 1990 suggèrent le remplacement du trait d'union de certains mots composés par une soudure, donnant la graphie « multiplateforme ». est un logiciel conçu pour fonctionner sur plusieurs plates-formes, c’est-à-dire le couple liant ordinateur et système d’exploitation. En anglais on parle souvent de «  » ou «  » ou encore de «  ».De nombreux langages de programmation sont multiplate-formes. En effet, il suffit de développer un compilateur destiné à générer un code exécutable compréhensible par chacun des processeurs qu’on désire utiliser.Par exemple, un logiciel fait avec la bibliothèque graphique GTK+ sous Linux ne fonctionnera pas tel quel sous Windows, même si l’Architecture est la même. Même si le langage est le C, le fonctionnement interne de la gestion de l’affichage est différent. On touche ici à la notion de portabilité d’un programme.Le problème se pose rapidement aux développeurs : choisir une plate-forme pour un programme revient à restreindre l’audience de celui-ci. Ce problème se complexifie d’autant plus que le secteur informatique tend à se diversifier, tant dans le système d’exploitation (Linux, Mac OS, etc.) que dans le matériel (GSM, PDA, etc.).Différentes solutions techniquesPour permettre aux logiciels d’avoir le plus d’audience possible on peut recourir à trois techniques :les langages compilés avec des bibliothèques multiplate-formes,les langages interprétés,les langages semi-interprétés.Langages compilés avec des bibliothèques multiplate-formesLa vitesse d’exécution et l’intégration sont des facteurs importants dans beaucoup de développements. Il est alors nécessaire de passer par les langages compilés. Les différents systèmes gérant différemment de nombreuses choses, on doit passer par des bibliothèques multiplate-formes pour obtenir l’abstraction nécessaire à une programmation multiplate-forme.Un autre avantage des programmes compilés est que ceux-ci sont directement utilisables chez l’utilisateur final. En fournissant la bibliothèque avec le produit, il n’est pas nécessaire d’utiliser un interpréteur ou une machine virtuelle.Il y a tout de même un inconvénient à l’utilisation de programmes compilés multiplate-formes : la distribution. Il faut en effet compiler une version du programme pour chaque système d’exploitation et pour chaque architecture, et ceci à chaque version du programme. Dans le cas des logiciels open source cela ne pose pas vraiment de problème car il suffit de fournir le moyen de compiler sur chaque système d’exploitation.Parmi les bibliothèques multiplate-formes les plus populaires citons wxWidgets et Qt. Ces deux bibliothèques fournissent un  très complet qui permet de développer une application une fois pour de nombreux systèmes (Linux, Mac OS, Windows, Windows CE, Palm OS, etc.).Les langages interprétésLes langages interprétés proposent une autre approche du problème. De tels langages sont interprétés à chaque fois que le programme est utilisé, du coup si l’interpréteur existe pour une plate-forme donnée, le programme fonctionnera sur cette plate-forme. Néanmoins, l’utilisation n’est aussi facile que dans le cas où tout ce qui est utilisé dans le programme fait partie de bibliothèques standards. Pour utiliser des fonctions avancées, il faut se rabattre sur des bibliothèques multiplate-formes (par exemple encore wxWidgets et Qt).La distribution de logiciels en langage interprété est beaucoup plus facile mais il faut souvent fournir l’interpréteur adéquat. Un autre problème est que les sources du logiciel sont fournies, cela peut poser des problèmes dans le cas où le code contient un procédé qui doit rester secret.Les langages semi-interprétésL’approche la plus récente pour créer des applications multiplate-formes est l’utilisation de langages semi-interprétés. Ces langages sont compilés vers un code intermédiaire qui est interprété. Cette approche présente les même avantages que les code interprétés mais possède une plus grande vitesse d’exécution.Le principal exemple est le langage Java de Sun Microsystems. Ce langage est compilé en bytecode Java qui est ensuite interprété par une machine virtuelle. Le bytecode peut être exécuté sur chaque plate-forme où la machine virtuelle est implémentée. Malgré l’utilisation de codes semi-interprétés, Java a la réputation d’être lent. Le langage Java peut être compilé en code natif (par exemple avec GCJ) mais il perd alors sa portabilité. La distribution de Java pose le problème de la machine virtuelle, il faut distribuer celle-ci avec le logiciel, ce qui n’est pas toujours très facile.NoteCatégorie:Terminologie du logicielar:متعدد المنصات ast:Multiplataforma ca:Multiplataforma cs:Multiplatformní software da:Platformsuafhængighed de:Plattformunabhängigkeit en:Cross-platform eo:Plursistema es:Multiplataforma eu:Plataforma-anitz fa:چندسکویی fi:Alustariippumattomuus gl:Multiplataforma hr:Više-platformski hu:Platformfüggetlenség id:Antar-platform it:Multipiattaforma ja:クロスプラットフォーム ko:크로스 플랫폼 lv:Vairākplatformu programmatūra ms:Rentas-pelantar nl:Multiplatform no:Multiplattform pl:Wieloplatformowość pt:Multiplataforma ro:Cross-platform ru:Кроссплатформенное программное обеспечение simple:Cross-platform sk:Viacplatformový softvér sq:Ndër-platformik sv:Multiplattform th:หลายระบบปฏิบัติการ tr:Çoklu Platform Yazılımları uk:Багатоплатформність vi:Đa nền tảng zh:跨平台