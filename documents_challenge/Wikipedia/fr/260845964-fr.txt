Un test de performance ou benchmark est un test dont l'objectif est de déterminer la performance d'un système informatique.L'acception la plus courante de ce terme est celle dans laquelle ces tests vont avoir pour objectif de mesurer les temps de réponse d'un système en fonction de sa sollicitation. Cette définition est donc très proche de celle de test de charge où l'on mesure le comportement d'un système en fonction de la charge d'utilisateurs simultanés.Types de TestsCes tests peuvent être de plusieurs types, notamment :Test de Charge : il s'agit d'un test au cours duquel on va simuler un nombre d'utilisateurs prédéfinis, afin de valider l'application pour une charge attendue d'utilisateurs. Ce type de test permet de mettre en évidence les points sensibles et critiques de l’architecture technique. Il permet en outre de mesurer le dimensionnement des serveurs, de la bande passante nécessaire sur le réseau, etc.Test de Performance : proche du Test de Charge, il s'agit d'un test au cours duquel on va mesurer les performances de l'application soumise à une charge d'utilisateurs. Les informations recueillies concernent les temps de réponse utilisateurs, les temps de réponse réseau et les temps de traitement d’une requête sur le(s) serveur(s).Test de Dégradations des Transactions : il s'agit d'un test technique primordial au cours duquel on ne va simuler que l'activité transactionnelle d'un seul scénario fonctionnel parmi tous les scénarii du périmètre des tests, de manière à déterminer quelle charge limite le système est capable de supporter pour ce scénario fonctionnel et d'isoler éventuellement les transactions qui dégradent le plus l'ensemble du système. La démarche utilisée est d'effectuer une montée en charge linéaire jusqu'au premier point de blocage ou d'inflexion. Pour dépasser celui-ci, il faut paramétrer méthodiquement les composants systèmes ou applicatifs afin d'identifier les paramètres pertinents, ce jusqu'à obtention de résultats satisfaisants. Méthodologiquement, ce test est effectué avant les autres types de tests tels que performance, robustesse, etc. où tous les scénarii fonctionnels sont impliqués.Test de stress : il s'agit d'un test au cours duquel on va simuler l'activité maximale attendue tous scénarios fonctionnels confondus en heures de pointe de l'application, pour voir comment le système réagit au maximum de l'activité attendue des utilisateurs. La durée du palier en pleine charge, en général de 2 heures, doit tenir compte du remplissage des différents caches applicatifs et clients, ainsi que de la stabilisation de la plateforme de test suite à l'éventuel effet de pic-rebond consécutif à la montée en charge.Test de Robustesse, d'endurance, de fiabilité: il s'agit de tests au cours duquel on va simuler une charge importante d'utilisateurs sur une durée relativement longue, pour voir si le système testé est capable de supporter une activité intense sur une longue période sans dégradations des performances et des ressources applicatives ou système. Le résultat est satisfaisant lorsque l'application a supporté une charge supérieure à la moitié de la capacité maximale du système, ou lorsque l'application a supporté l'activité d'une journée ou plusieurs jours/mois/années, pendant 8 à 10 heures, sans dégradation de performance (temps, erreurs), ni perte de ressources systèmes.Test de capacité, Test de montée en charge : il s'agit d'un test au cours duquel on va simuler un nombre d'utilisateurs sans cesse croissant de manière à déterminer quelle charge limite le système est capable de supporter. Éventuellement, des paramétrages peuvent être effectués, dans la même logique que lors des tests de dégradation, l'objectif du test étant néanmoins ici de déterminer la capacité maximale de l'ensemble système-applicatif dans une optique prévisionnelle (cf. Capacity Planning).Test aux limites : il s'agit d'un test au cours duquel on va simuler en général une activité bien supérieure à l'activité normale, pour voir comment le système réagit aux limites du modèle d'usage de l'application. Proche du test de capacité, il ne recouvre pas seulement l'augmentation d'un nombre d'utilisateurs simultanés qui se limite ici à un pourcentage en principe prédéfini, mais aussi les possibilités d'augmentation du nombre de processus métier réalisés dans une plage de temps ou en simultané, en jouant sur les cadences d'exécutions, les temps d'attente, mais aussi les configurations de la plateforme de test dans le cadre d'architectures redondées (Crash Tests).Il existe d'autre types de tests, plus ciblés et fonction des objectifs à atteindre dans la campagne de tests : Test de Benchmark (comparaisons de logiciel, matériels, architectures,...), Tests de non-régression, Tests de Composants, Tests de Volumétrie des données, etc. Étant entendu qu'en principe un type de test correspond à un type d'objectif, et que dans une matrice de couverture des tests les résultats se recoupent obligatoirement, il est rare (et coûteux) de réaliser l’ensemble de ces tests pour une application donnée.Si l'application est déjà en production, ou en phase pilote, on peut aussi, afin de connaître les performances du système, réaliser une métrologie, qualifié souvent de "métrologie de suivi de site", qui permettra d'observer dans le détail le fonctionnement du système sur la base d'actions réelles des utilisateurs. Les résultats d'une telle campagne de métrologie permettant de connaître les fonctionnalités réellement utilisées, et leur fréquence d'utilisation, il peuvent ensuite servir de base pour orienter les tests à réaliser dans des simulations futures.Définition du plan de testsLe plan de tests est l'expression du besoin de la campagne de tests. On y trouve la présentation du projet (résumé, architecture technique et logicielle), les objectifs, le modèle de charge, le type de tests à réaliser, les scénarii fonctionnels (ou cas d'utilisation) à tester accompagnés des jeux de données nécessaires, et un planning d'exécution de ces tests.Les jeux de données permettent de simuler au plus juste la réalité. Un jeu de données peut, par exemple, consister en n logins et n mots de passe, permettant ainsi de simuler des utilisateurs différents se connectant à l'application.MéthodologieLes tests de performance doivent être implémentés et réalisés tout au long du cycle de développement, et le plus tôt possible. Un résultat plus ou moins précis maintenant vaut mieux qu’un résultat très précis plus tard.Testez de façon large, puis de façon approfondieTestez dans un environnement contrôléL'environnement de test doit être si possible identique à l’environnement de production, à défaut à une échelle étalonnée reconnue fiable permettant d'établir des abaquesÉtape 1 : Analyse de Référence (l’analyse préliminaire consiste en l’enregistrement d’un ou de plusieurs scénarii (ou cas d'utilisation) pour mieux comprendre l’application et l’étendue du test).Définir le système à tester, les processus métier, et les objectifs (métiers, techniques, économiques)Définir les scénarii, par rapport à une analyse complète des risques métiers et techniquesDéfinir le modèle de charge, par rapport au modèle d'usage de l'applicationCaractériser les données pour chaque scénariiEnregistrer les scénariiÉtape 2 : Tests PréliminairesMettre en œuvre des moyens et définir la plate-forme de testExécuter les tests de charge (préliminaires)Analyser les résultatsÉtape 3 : Test de Charge à Grande ÉchelleMettre en œuvre des moyens et définir la plate-forme de testExécuter les tests de chargeAnalyser les résultatsOptimiser le systèmeOutillage nécessaireComme il s'agit en général de simuler un nombre d'utilisateurs important, il s'avère nécessaire d'automatiser ces tests. L'automatisation des tests, que ce soit pour des tests de performance ou non, nécessite de répondre à deux problèmes :être capable d'enchaîner des actions sur le système selon des scénarii qui ont du sens pour les objectifs de testvaloriser ces actions sur des données qui sont pertinentes à la fois vis-à-vis des scénarii et de l'état du système au moment où l'on exécute ces testsPrenons par exemple le cas du test de performance d'un portail eCommerce dans lequel on va adresser plus particulièrement la fonction de constitution d'un panier d'achat. Il faut disposer d'un mécanisme d'automatisation des actions de sélection d'article, de validation de commande, etc. Mais il faut également valoriser ces actions en donnant les articles qui seront effectivement commandés par les utilisateurs virtuels (simulés) dans le cadre du test de performance. Or, la nature et le nombre de ces articles peuvent varier en fonction du contenu de la base de données d'articles de l'application, du profil de consommateur de l'utilisateur simulé, ou encore de la période de l'année que l'on simule dans le test.Une plate-forme de test de performances va généralement comporter :Un injecteur de charge (appelé aussi générateur ou moteur de charge) : logiciel qui va être capable de simuler les actions des utilisateurs et de générer la charge. Ces actions sont définies dans des scripts automatisant des scénarii et valorisés sur un lot de données particulier.Des sondes : placées au niveau du système cible, elles permettent de remonter des mesures dont l'objet est de savoir comment réagissent individuellement des composantes du système. Les éléments sur lesquels on va en général placer des sondes sont l'utilisation de la mémoire, processeur, disque et réseau. Il est évidemment préférable d'utiliser des sondes qui ne perturbent pas le système, en privilégiant au maximum les API disponibles en natif au sein des composants techniques, et en évitant l'utilisation d'agents.Les solutions de tests de performances Web vont permettre de simplifier et d'automatiser les tests : création plus ou moins automatisée des scénarii de tests, configuration des scénarii avec ou sans script, simulation d'utilisateurs virtuels avec collecte des mesures (et génération automatique de rapports), etc.Acteurs et Outils du MarchéWeb Performance SuiteNetqostGénieLog : Génération de données pour le testEverTESTBorland SilkPerformerHP LoadRunner/Performance CenterQuotiumJMeter, injecteur sous licence ApacheNeoLoadip-label.newtestOpenStaLiens externesZonebench Base de donnée de 20 logiciels de benchmark qui fonctionnent sous WindowsCatégorie:Gestion de projet Performancebs:Benchmark da:Benchmark de:EDV-Benchmark en:Benchmark (computing) es:Benchmark gl:Benchmark he:בוחן ביצועים is:Afkastaprófun it:Benchmark (informatica) ja:ベンチマーク nl:Benchmark (computer) pl:Testowanie wzorcowe pt:Benchmark (computação) ru:Бенчмарк simple:Benchmark th:การวัดเปรียบเทียบสมรรถนะของคอมพิวเตอร์ tr:Denektaşları